/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 159);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/others/browserMqtt.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/pages/others/browserMqtt.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}var mqtt=/******/function(modules){// webpackBootstrap\n/******/ // The module cache\n/******/var installedModules={};/******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ // Check if module is in cache\n/******/if(installedModules[moduleId])/******/return installedModules[moduleId].exports;/******/ // Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/exports:{},/******/id:moduleId,/******/loaded:false/******/};/******/ // Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ // Flag the module as loaded\n/******/module.loaded=true;/******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ // expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******/ // expose the module cache\n/******/__webpack_require__.c=installedModules;/******/ // __webpack_public_path__\n/******/__webpack_require__.p=\"\";/******/ // Load entry module and return exports\n/******/return __webpack_require__(0);/******/}(/************************************************************************/ /******/[/* 0 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';var MqttClient=__webpack_require__(2),url=__webpack_require__(54),xtend=__webpack_require__(60),protocols={},protocolList=[];if('browser'!==process.title){protocols.mqtt=__webpack_require__(61);protocols.tcp=__webpack_require__(61);protocols.ssl=__webpack_require__(63);protocols.tls=__webpack_require__(63);protocols.mqtts=__webpack_require__(63);}protocols.ws=__webpack_require__(65);protocols.wss=__webpack_require__(65);protocolList=['mqtt','mqtts','ws','wss'];/**\n\t * Parse the auth attribute and merge username and password in the options object.\n\t *\n\t * @param {Object} [opts] option object\n\t */function parseAuthOptions(opts){var matches;if(opts.auth){matches=opts.auth.match(/^(.+):(.+)$/);if(matches){opts.username=matches[1];opts.password=matches[2];}else{opts.username=opts.auth;}}}/**\n\t * connect - connect to an MQTT broker.\n\t *\n\t * @param {String} [brokerUrl] - url of the broker, optional\n\t * @param {Object} opts - see MqttClient#constructor\n\t */function connect(brokerUrl,opts){if('object'===_typeof(brokerUrl)&&!opts){opts=brokerUrl;brokerUrl=null;}opts=opts||{};if(brokerUrl){opts=xtend(url.parse(brokerUrl,true),opts);opts.protocol=opts.protocol.replace(/\\:$/,'');}// merge in the auth options if supplied\nparseAuthOptions(opts);// support clientId passed in the query string of the url\nif(opts.query&&'string'===typeof opts.query.clientId){opts.clientId=opts.query.clientId;}if(opts.cert&&opts.key){if(opts.protocol){if(-1===['mqtts','wss'].indexOf(opts.protocol)){/*\n\t         * jshint and eslint\n\t         * complains that break from default cannot be reached after throw\n\t         * it is a foced exit from a control structure\n\t         * maybe add a check after switch to see if it went through default\n\t         * and then throw the error\n\t        */ /*jshint -W027*/ /*eslint no-unreachable:1*/switch(opts.protocol){case'mqtt':opts.protocol='mqtts';break;case'ws':opts.protocol='wss';break;default:throw new Error('Unknown protocol for secure conenction: \"'+opts.protocol+'\"!');break;}/*eslint no-unreachable:0*/ /*jshint +W027*/}}else{// don't know what protocol he want to use, mqtts or wss\nthrow new Error('Missing secure protocol key');}}if(!protocols[opts.protocol]){opts.protocol=protocolList.filter(function(key){return'function'===typeof protocols[key];})[0];}if(false===opts.clean&&!opts.clientId){throw new Error('Missing clientId for unclean clients');}function wrapper(client){if(opts.servers){if(!client._reconnectCount||client._reconnectCount===opts.servers.length){client._reconnectCount=0;}opts.host=opts.servers[client._reconnectCount].host;opts.port=opts.servers[client._reconnectCount].port;opts.hostname=opts.host;client._reconnectCount++;}return protocols[opts.protocol](client,opts);}return new MqttClient(wrapper,opts);}module.exports=connect;module.exports.connect=connect;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 1 */ /***/function(module,exports){// shim for using process in browser\nvar process=module.exports={};// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations\nreturn setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined\nif((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\nreturn cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\nreturn cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations\nreturn clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined\nif((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\nreturn cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n// Some versions of I.E. have different rules for clearTimeout vs setTimeout\nreturn cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects\nfunction Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues\nprocess.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};/***/},/* 2 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,process){'use strict';/**\n\t * Module dependencies\n\t */ /*global setImmediate:true*/var events=__webpack_require__(3),Store=__webpack_require__(4),eos=__webpack_require__(40),mqttPacket=__webpack_require__(43),Writable=__webpack_require__(5).Writable,inherits=__webpack_require__(34),reInterval=__webpack_require__(53),setImmediate=global.setImmediate||function(callback){// works in node v0.8\nprocess.nextTick(callback);},defaultConnectOptions={keepalive:10,reschedulePings:true,protocolId:'MQTT',protocolVersion:4,reconnectPeriod:1000,connectTimeout:30*1000,clean:true};function defaultId(){return'mqttjs_'+Math.random().toString(16).substr(2,8);}function sendPacket(client,packet,cb){try{var buf=mqttPacket.generate(packet);if(!client.stream.write(buf)&&cb){client.stream.once('drain',cb);}else if(cb){cb();}}catch(err){if(cb){cb(err);}else{client.emit('error',err);}}}function storeAndSend(client,packet,cb){client.outgoingStore.put(packet,function storedPacket(err){if(err){return cb&&cb(err);}sendPacket(client,packet,cb);});}function nop(){}/**\n\t * MqttClient constructor\n\t *\n\t * @param {Stream} stream - stream\n\t * @param {Object} [options] - connection options\n\t * (see Connection#connect)\n\t */function MqttClient(streamBuilder,options){var k,that=this;if(!(this instanceof MqttClient)){return new MqttClient(streamBuilder,options);}this.options=options||{};// Defaults\nfor(k in defaultConnectOptions){if('undefined'===typeof this.options[k]){this.options[k]=defaultConnectOptions[k];}else{this.options[k]=options[k];}}this.options.clientId=this.options.clientId||defaultId();this.streamBuilder=streamBuilder;// Inflight message storages\nthis.outgoingStore=this.options.outgoingStore||new Store();this.incomingStore=this.options.incomingStore||new Store();// Should QoS zero messages be queued when the connection is broken?\nthis.queueQoSZero=null==this.options.queueQoSZero?true:this.options.queueQoSZero;// Ping timer, setup in _setupPingTimer\nthis.pingTimer=null;// Is the client connected?\nthis.connected=false;// Are we disconnecting?\nthis.disconnecting=false;// Packet queue\nthis.queue=[];// connack timer\nthis.connackTimer=null;// Reconnect timer\nthis.reconnectTimer=null;// MessageIDs starting with 1\nthis.nextId=Math.floor(Math.random()*65535);// Inflight callbacks\nthis.outgoing={};// Mark connected on connect\nthis.on('connect',function(){this.connected=true;var outStore=null;outStore=this.outgoingStore.createStream();// Control of stored messages\noutStore.once('readable',function(){function storeDeliver(){var packet=outStore.read(1),cb;if(!packet){return;}// Avoid unnecesary stream read operations when disconnected\nif(!that.disconnecting&&!that.reconnectTimer&&0<that.options.reconnectPeriod){outStore.read(0);cb=that.outgoing[packet.messageId];that.outgoing[packet.messageId]=function(){// Ensure that the original callback passed in to publish gets invoked\nif(cb){cb();}// Ensure that the next message will only be read after callback is issued\nstoreDeliver();};that._sendPacket(packet);}else if(outStore.destroy){outStore.destroy();}}storeDeliver();}).on('error',this.emit.bind(this,'error'));});// Mark disconnected on stream close\nthis.on('close',function(){this.connected=false;clearTimeout(this.connackTimer);});// Setup ping timer\nthis.on('connect',this._setupPingTimer);// Send queued packets\nthis.on('connect',function(){var queue=this.queue;function deliver(){var entry=queue.shift(),packet=null;if(!entry){return;}packet=entry.packet;that._sendPacket(packet,function(err){if(entry.cb){entry.cb(err);}deliver();});}deliver();});// Clear ping timer\nthis.on('close',function(){if(null!==that.pingTimer){that.pingTimer.clear();that.pingTimer=null;}});// Setup reconnect timer on disconnect\nthis.on('close',this._setupReconnect);events.EventEmitter.call(this);this._setupStream();}inherits(MqttClient,events.EventEmitter);/**\n\t * setup the event handlers in the inner stream.\n\t *\n\t * @api private\n\t */MqttClient.prototype._setupStream=function(){var connectPacket,that=this,writable=new Writable(),parser=mqttPacket.parser(this.options),completeParse=null,packets=[];this._clearReconnect();this.stream=this.streamBuilder(this);parser.on('packet',function(packet){packets.push(packet);});function process(){var packet=packets.shift(),done=completeParse;if(packet){that._handlePacket(packet,process);}else{completeParse=null;done();}}writable._write=function(buf,enc,done){completeParse=done;parser.parse(buf);process();};this.stream.pipe(writable);// Suppress connection errors\nthis.stream.on('error',nop);// Echo stream close\neos(this.stream,this.emit.bind(this,'close'));// Send a connect packet\nconnectPacket=Object.create(this.options);connectPacket.cmd='connect';// avoid message queue\nsendPacket(this,connectPacket);// Echo connection errors\nparser.on('error',this.emit.bind(this,'error'));// many drain listeners are needed for qos 1 callbacks if the connection is intermittent\nthis.stream.setMaxListeners(1000);clearTimeout(this.connackTimer);this.connackTimer=setTimeout(function(){that._cleanUp(true);},this.options.connectTimeout);};MqttClient.prototype._handlePacket=function(packet,done){switch(packet.cmd){case'publish':this._handlePublish(packet,done);break;case'puback':case'pubrec':case'pubcomp':case'suback':case'unsuback':this._handleAck(packet);done();break;case'pubrel':this._handlePubrel(packet,done);break;case'connack':this._handleConnack(packet);done();break;case'pingresp':this._handlePingresp(packet);done();break;default:// do nothing\n// maybe we should do an error handling\n// or just log it\nbreak;}};MqttClient.prototype._checkDisconnecting=function(callback){if(this.disconnecting){if(callback){callback(new Error('client disconnecting'));}else{this.emit('error',new Error('client disconnecting'));}}return this.disconnecting;};/**\n\t * publish - publish <message> to <topic>\n\t *\n\t * @param {String} topic - topic to publish to\n\t * @param {String, Buffer} message - message to publish\n\t * @param {Object} [opts] - publish options, includes:\n\t *    {Number} qos - qos level to publish on\n\t *    {Boolean} retain - whether or not to retain the message\n\t * @param {Function} [callback] - function(err){}\n\t *    called when publish succeeds or fails\n\t * @returns {MqttClient} this - for chaining\n\t * @api public\n\t *\n\t * @example client.publish('topic', 'message');\n\t * @example\n\t *     client.publish('topic', 'message', {qos: 1, retain: true});\n\t * @example client.publish('topic', 'message', console.log);\n\t */MqttClient.prototype.publish=function(topic,message,opts,callback){var packet;// .publish(topic, payload, cb);\nif('function'===typeof opts){callback=opts;opts=null;}// Default opts\nif(!opts){opts={qos:0,retain:false};}if(this._checkDisconnecting(callback)){return this;}packet={cmd:'publish',topic:topic,payload:message,qos:opts.qos,retain:opts.retain,messageId:this._nextId()};switch(opts.qos){case 1:case 2:// Add to callbacks\nthis.outgoing[packet.messageId]=callback||nop;this._sendPacket(packet);break;default:this._sendPacket(packet,callback);break;}return this;};/**\n\t * subscribe - subscribe to <topic>\n\t *\n\t * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}\n\t * @param {Object} [opts] - optional subscription options, includes:\n\t *    {Number} qos - subscribe qos level\n\t * @param {Function} [callback] - function(err, granted){} where:\n\t *    {Error} err - subscription error (none at the moment!)\n\t *    {Array} granted - array of {topic: 't', qos: 0}\n\t * @returns {MqttClient} this - for chaining\n\t * @api public\n\t * @example client.subscribe('topic');\n\t * @example client.subscribe('topic', {qos: 1});\n\t * @example client.subscribe({'topic': 0, 'topic2': 1}, console.log);\n\t * @example client.subscribe('topic', console.log);\n\t */MqttClient.prototype.subscribe=function(){var packet,args=Array.prototype.slice.call(arguments),subs=[],obj=args.shift(),callback=args.pop()||nop,opts=args.pop();if('string'===typeof obj){obj=[obj];}if('function'!==typeof callback){opts=callback;callback=nop;}if(this._checkDisconnecting(callback)){return this;}if(!opts){opts={qos:0};}if(Array.isArray(obj)){obj.forEach(function(topic){subs.push({topic:topic,qos:opts.qos});});}else{Object.keys(obj).forEach(function(k){subs.push({topic:k,qos:obj[k]});});}packet={cmd:'subscribe',subscriptions:subs,qos:1,retain:false,dup:false,messageId:this._nextId()};this.outgoing[packet.messageId]=callback;this._sendPacket(packet);return this;};/**\n\t * unsubscribe - unsubscribe from topic(s)\n\t *\n\t * @param {String, Array} topic - topics to unsubscribe from\n\t * @param {Function} [callback] - callback fired on unsuback\n\t * @returns {MqttClient} this - for chaining\n\t * @api public\n\t * @example client.unsubscribe('topic');\n\t * @example client.unsubscribe('topic', console.log);\n\t */MqttClient.prototype.unsubscribe=function(topic,callback){var packet={cmd:'unsubscribe',qos:1,messageId:this._nextId()};callback=callback||nop;if(this._checkDisconnecting(callback)){return this;}if('string'===typeof topic){packet.unsubscriptions=[topic];}else if('object'===_typeof(topic)&&topic.length){packet.unsubscriptions=topic;}this.outgoing[packet.messageId]=callback;this._sendPacket(packet);return this;};/**\n\t * end - close connection\n\t *\n\t * @returns {MqttClient} this - for chaining\n\t * @param {Boolean} force - do not wait for all in-flight messages to be acked\n\t * @param {Function} cb - called when the client has been closed\n\t *\n\t * @api public\n\t */MqttClient.prototype.end=function(force,cb){var that=this;if('function'===typeof force){cb=force;force=false;}function closeStores(){that.incomingStore.close(function(){that.outgoingStore.close(cb);});}function finish(){that._cleanUp(force,closeStores);}if(this.disconnecting){return true;}this.disconnecting=true;if(!force&&0<Object.keys(this.outgoing).length){// wait 10ms, just to be sure we received all of it\nthis.once('outgoingEmpty',setTimeout.bind(null,finish,10));}else{finish();}return this;};/**\n\t * _reconnect - implement reconnection\n\t * @api privateish\n\t */MqttClient.prototype._reconnect=function(){this.emit('reconnect');this._setupStream();};/**\n\t * _setupReconnect - setup reconnect timer\n\t */MqttClient.prototype._setupReconnect=function(){var that=this;if(!that.disconnecting&&!that.reconnectTimer&&0<that.options.reconnectPeriod){this.emit('offline');that.reconnectTimer=setInterval(function(){that._reconnect();},that.options.reconnectPeriod);}};/**\n\t * _clearReconnect - clear the reconnect timer\n\t */MqttClient.prototype._clearReconnect=function(){if(this.reconnectTimer){clearInterval(this.reconnectTimer);this.reconnectTimer=false;}};/**\n\t * _cleanUp - clean up on connection end\n\t * @api private\n\t */MqttClient.prototype._cleanUp=function(forced,done){if(done){this.stream.on('close',done);}if(forced){this.stream.destroy();}else{this._sendPacket({cmd:'disconnect'},setImmediate.bind(null,this.stream.end.bind(this.stream)));}if(this.reconnectTimer){this._clearReconnect();this._setupReconnect();}if(null!==this.pingTimer){this.pingTimer.clear();this.pingTimer=null;}};/**\n\t * _sendPacket - send or queue a packet\n\t * @param {String} type - packet type (see `protocol`)\n\t * @param {Object} packet - packet options\n\t * @param {Function} cb - callback when the packet is sent\n\t * @api private\n\t */MqttClient.prototype._sendPacket=function(packet,cb){if(!this.connected){if(0<packet.qos||'publish'!==packet.cmd||this.queueQoSZero){this.queue.push({packet:packet,cb:cb});}else if(cb){cb(new Error('No connection to broker'));}return;}// When sending a packet, reschedule the ping timer\nthis._shiftPingInterval();switch(packet.qos){case 2:case 1:storeAndSend(this,packet,cb);break;/**\n\t     * no need of case here since it will be caught by default\n\t     * and jshint comply that before default it must be a break\n\t     * anyway it will result in -1 evaluation\n\t     */case 0:/* falls through */default:sendPacket(this,packet,cb);break;}};/**\n\t * _setupPingTimer - setup the ping timer\n\t *\n\t * @api private\n\t */MqttClient.prototype._setupPingTimer=function(){var that=this;if(!this.pingTimer&&this.options.keepalive){this.pingResp=true;this.pingTimer=reInterval(function(){that._checkPing();},this.options.keepalive*1000);}};/**\n\t * _shiftPingInterval - reschedule the ping interval\n\t *\n\t * @api private\n\t */MqttClient.prototype._shiftPingInterval=function(){if(this.pingTimer&&this.options.keepalive&&this.options.reschedulePings){this.pingTimer.reschedule(this.options.keepalive*1000);}};/**\n\t * _checkPing - check if a pingresp has come back, and ping the server again\n\t *\n\t * @api private\n\t */MqttClient.prototype._checkPing=function(){if(this.pingResp){this.pingResp=false;this._sendPacket({cmd:'pingreq'});}else{// do a forced cleanup since socket will be in bad shape\nthis._cleanUp(true);}};/**\n\t * _handlePingresp - handle a pingresp\n\t *\n\t * @api private\n\t */MqttClient.prototype._handlePingresp=function(){this.pingResp=true;};/**\n\t * _handleConnack\n\t *\n\t * @param {Object} packet\n\t * @api private\n\t */MqttClient.prototype._handleConnack=function(packet){var rc=packet.returnCode,// TODO: move to protocol\nerrors=['','Unacceptable protocol version','Identifier rejected','Server unavailable','Bad username or password','Not authorized'];clearTimeout(this.connackTimer);if(0===rc){this.emit('connect',packet);}else if(0<rc){this.emit('error',new Error('Connection refused: '+errors[rc]));}};/**\n\t * _handlePublish\n\t *\n\t * @param {Object} packet\n\t * @api private\n\t */ /*\n\tthose late 2 case should be rewrite to comply with coding style:\n\n\tcase 1:\n\tcase 0:\n\t  // do not wait sending a puback\n\t  // no callback passed\n\t  if (1 === qos) {\n\t    this._sendPacket({\n\t      cmd: 'puback',\n\t      messageId: mid\n\t    });\n\t  }\n\t  // emit the message event for both qos 1 and 0\n\t  this.emit('message', topic, message, packet);\n\t  this.handleMessage(packet, done);\n\t  break;\n\tdefault:\n\t  // do nothing but every switch mus have a default\n\t  // log or throw an error about unknown qos\n\t  break;\n\n\tfor now i just suppressed the warnings\n\t*/MqttClient.prototype._handlePublish=function(packet,done){var topic=packet.topic.toString(),message=packet.payload,qos=packet.qos,mid=packet.messageId,that=this;switch(qos){case 2:this.incomingStore.put(packet,function(){that._sendPacket({cmd:'pubrec',messageId:mid},done);});break;case 1:// do not wait sending a puback\n// no callback passed\nthis._sendPacket({cmd:'puback',messageId:mid});/* falls through */case 0:// emit the message event for both qos 1 and 0\nthis.emit('message',topic,message,packet);this.handleMessage(packet,done);break;default:// do nothing\n// log or throw an error about unknown qos\nbreak;}};/**\n\t * Handle messages with backpressure support, one at a time.\n\t * Override at will.\n\t *\n\t * @param Packet packet the packet\n\t * @param Function callback call when finished\n\t * @api public\n\t */MqttClient.prototype.handleMessage=function(packet,callback){callback();};/**\n\t * _handleAck\n\t *\n\t * @param {Object} packet\n\t * @api private\n\t */MqttClient.prototype._handleAck=function(packet){var mid=packet.messageId,type=packet.cmd,response=null,cb=this.outgoing[mid],that=this;if(!cb){// Server sent an ack in error, ignore it.\nreturn;}// Process\nswitch(type){case'pubcomp':// same thing as puback for QoS 2\ncase'puback':// Callback - we're done\ndelete this.outgoing[mid];this.outgoingStore.del(packet,cb);break;case'pubrec':response={cmd:'pubrel',qos:2,messageId:mid};this._sendPacket(response);break;case'suback':delete this.outgoing[mid];this.outgoingStore.del(packet,function(err,original){var i,origSubs=original.subscriptions,granted=packet.granted;if(err){// missing packet, what should we do?\nreturn that.emit('error',err);}for(i=0;i<granted.length;i+=1){origSubs[i].qos=granted[i];}cb(null,origSubs);});break;case'unsuback':delete this.outgoing[mid];this.outgoingStore.del(packet,cb);break;default:that.emit('error',new Error('unrecognized packet type'));}if(this.disconnecting&&0===Object.keys(this.outgoing).length){this.emit('outgoingEmpty');}};/**\n\t * _handlePubrel\n\t *\n\t * @param {Object} packet\n\t * @api private\n\t */MqttClient.prototype._handlePubrel=function(packet,callback){var mid=packet.messageId,that=this;that.incomingStore.get(packet,function(err,pub){if(err){return that.emit('error',err);}if('pubrel'!==pub.cmd){that.emit('message',pub.topic,pub.payload,pub);that.incomingStore.put(packet);}that._sendPacket({cmd:'pubcomp',messageId:mid},callback);});};/**\n\t * _nextId\n\t */MqttClient.prototype._nextId=function(){var id=this.nextId++;// Ensure 16 bit unsigned int:\nif(65535===id){this.nextId=1;}return id;};module.exports=MqttClient;/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}(),__webpack_require__(1));/***/},/* 3 */ /***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nfunction EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners=10;// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};// If there is no 'error' event listener then throw.\nif(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event\n}throw TypeError('Uncaught, unspecified \"error\" event.');}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){// fast cases\ncase 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;// slower\ndefault:len=arguments.length;args=new Array(len-1);for(i=1;i<len;i++){args[i-1]=arguments[i];}handler.apply(this,args);}}else if(isObject(handler)){len=arguments.length;args=new Array(len-1);for(i=1;i<len;i++){args[i-1]=arguments[i];}listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};// To avoid recursion in the case that type === \"newListener\"! Before\n// adding it to the listeners, first emit \"newListener\".\nif(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])// Optimize the case of one listener. Don't need the extra array object.\nthis._events[type]=listener;else if(isObject(this._events[type]))// If we've already got an array, just append.\nthis._events[type].push(listener);else// Adding the second element, need to change to array.\nthis._events[type]=[this._events[type],listener];// Check for listener leak\nif(isObject(this._events[type])&&!this._events[type].warned){var m;if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){// not supported in IE 10\nconsole.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;// not listening for removeListener, no need to emit\nif(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}// emit removeListener for all listeners on all events\nif(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else{// LIFO order\nwhile(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.listenerCount=function(emitter,type){var ret;if(!emitter._events||!emitter._events[type])ret=0;else if(isFunction(emitter._events[type]))ret=1;else ret=emitter._events[type].length;return ret;};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}/***/},/* 4 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';var Readable=__webpack_require__(5).Readable,streamsOpts={objectMode:true};/**\n\t * In-memory implementation of the message store\n\t * This can actually be saved into files.\n\t *\n\t */function Store(){if(!(this instanceof Store)){return new Store();}this._inflights={};}/**\n\t * Adds a packet to the store, a packet is\n\t * anything that has a messageId property.\n\t *\n\t */Store.prototype.put=function(packet,cb){this._inflights[packet.messageId]=packet;if(cb){cb();}return this;};/**\n\t * Creates a stream with all the packets in the store\n\t *\n\t */Store.prototype.createStream=function(){var stream=new Readable(streamsOpts),inflights=this._inflights,ids=Object.keys(this._inflights),destroyed=false,i=0;stream._read=function(){if(!destroyed&&i<ids.length){this.push(inflights[ids[i++]]);}else{this.push(null);}};stream.destroy=function(){if(destroyed){return;}var self=this;destroyed=true;process.nextTick(function(){self.emit('close');});};return stream;};/**\n\t * deletes a packet from the store.\n\t */Store.prototype.del=function(packet,cb){packet=this._inflights[packet.messageId];if(packet){delete this._inflights[packet.messageId];cb(null,packet);}else if(cb){cb(new Error('missing packet'));}return this;};/**\n\t * get a packet from the store.\n\t */Store.prototype.get=function(packet,cb){packet=this._inflights[packet.messageId];if(packet){cb(null,packet);}else if(cb){cb(new Error('missing packet'));}return this;};/**\n\t * Close the store\n\t */Store.prototype.close=function(cb){this._inflights=null;if(cb){cb();}};module.exports=Store;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 5 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){var Stream=__webpack_require__(6);// hack to fix a circular dependency issue when used with browserify\nexports=module.exports=__webpack_require__(27);exports.Stream=Stream;exports.Readable=exports;exports.Writable=__webpack_require__(36);exports.Duplex=__webpack_require__(37);exports.Transform=__webpack_require__(38);exports.PassThrough=__webpack_require__(39);if(!process.browser&&process.env.READABLE_STREAM==='disable'){module.exports=__webpack_require__(6);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 6 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports=Stream;var EE=__webpack_require__(7).EventEmitter;var inherits=__webpack_require__(8);inherits(Stream,EE);Stream.Readable=__webpack_require__(9);Stream.Writable=__webpack_require__(23);Stream.Duplex=__webpack_require__(24);Stream.Transform=__webpack_require__(25);Stream.PassThrough=__webpack_require__(26);// Backwards-compat with node 0.4.x\nStream.Stream=Stream;// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\nfunction Stream(){EE.call(this);}Stream.prototype.pipe=function(dest,options){var source=this;function ondata(chunk){if(dest.writable){if(false===dest.write(chunk)&&source.pause){source.pause();}}}source.on('data',ondata);function ondrain(){if(source.readable&&source.resume){source.resume();}}dest.on('drain',ondrain);// If the 'end' option is not supplied, dest.end() will be called when\n// source gets the 'end' or 'close' events.  Only dest.end() once.\nif(!dest._isStdio&&(!options||options.end!==false)){source.on('end',onend);source.on('close',onclose);}var didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end();}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==='function')dest.destroy();}// don't leave dangling pipes when there are errors.\nfunction onerror(er){cleanup();if(EE.listenerCount(this,'error')===0){throw er;// Unhandled stream error in pipe.\n}}source.on('error',onerror);dest.on('error',onerror);// remove all the event listeners that were added.\nfunction cleanup(){source.removeListener('data',ondata);dest.removeListener('drain',ondrain);source.removeListener('end',onend);source.removeListener('close',onclose);source.removeListener('error',onerror);dest.removeListener('error',onerror);source.removeListener('end',cleanup);source.removeListener('close',cleanup);dest.removeListener('close',cleanup);}source.on('end',cleanup);source.on('close',cleanup);dest.on('close',cleanup);dest.emit('pipe',source);// Allow for unix-like usage: A.pipe(B).pipe(C)\nreturn dest;};/***/},/* 7 */ /***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nfunction EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners=10;// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};// If there is no 'error' event listener then throw.\nif(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event\n}else{// At least give some kind of context to the user\nvar err=new Error('Uncaught, unspecified \"error\" event. ('+er+')');err.context=er;throw err;}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){// fast cases\ncase 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;// slower\ndefault:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args);}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};// To avoid recursion in the case that type === \"newListener\"! Before\n// adding it to the listeners, first emit \"newListener\".\nif(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])// Optimize the case of one listener. Don't need the extra array object.\nthis._events[type]=listener;else if(isObject(this._events[type]))// If we've already got an array, just append.\nthis._events[type].push(listener);else// Adding the second element, need to change to array.\nthis._events[type]=[this._events[type],listener];// Check for listener leak\nif(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){// not supported in IE 10\nconsole.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;// not listening for removeListener, no need to emit\nif(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}// emit removeListener for all listeners on all events\nif(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else if(listeners){// LIFO order\nwhile(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length;}return 0;};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type);};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}/***/},/* 8 */ /***/function(module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}/***/},/* 9 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){exports=module.exports=__webpack_require__(10);exports.Stream=__webpack_require__(6);exports.Readable=exports;exports.Writable=__webpack_require__(19);exports.Duplex=__webpack_require__(18);exports.Transform=__webpack_require__(21);exports.PassThrough=__webpack_require__(22);if(!process.browser&&process.env.READABLE_STREAM==='disable'){module.exports=__webpack_require__(6);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 10 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports=Readable;/*<replacement>*/var isArray=__webpack_require__(11);/*</replacement>*/ /*<replacement>*/var Buffer=__webpack_require__(12).Buffer;/*</replacement>*/Readable.ReadableState=ReadableState;var EE=__webpack_require__(7).EventEmitter;/*<replacement>*/if(!EE.listenerCount)EE.listenerCount=function(emitter,type){return emitter.listeners(type).length;};/*</replacement>*/var Stream=__webpack_require__(6);/*<replacement>*/var util=__webpack_require__(16);util.inherits=__webpack_require__(8);/*</replacement>*/var StringDecoder;/*<replacement>*/var debug=__webpack_require__(17);if(debug&&debug.debuglog){debug=debug.debuglog('stream');}else{debug=function debug(){};}/*</replacement>*/util.inherits(Readable,Stream);function ReadableState(options,stream){var Duplex=__webpack_require__(18);options=options||{};// the point at which it stops calling _read() to fill the buffer\n// Note: 0 is a valid value, means \"don't call _read preemptively ever\"\nvar hwm=options.highWaterMark;var defaultHwm=options.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.buffer=[];this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// whenever we return null, then we set a flag to say\n// that we're awaiting a 'readable' event emission.\nthis.needReadable=false;this.emittedReadable=false;this.readableListening=false;// object stream flag. Used to make read(n) ignore n and to\n// make all the buffer merging and length checks go away\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen\n// after read()ing all the bytes and not getting any pushback.\nthis.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s\nthis.awaitDrain=0;// if true, a maybeReadMore has been scheduled\nthis.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(20).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}function Readable(options){var Duplex=__webpack_require__(18);if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy\nthis.readable=true;Stream.call(this);}// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push=function(chunk,encoding){var state=this._readableState;if(util.isString(chunk)&&!state.objectMode){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=new Buffer(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(util.isNullOrUndefined(chunk)){state.reading=false;if(!state.ended)onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var e=new Error('stream.unshift() after end event');stream.emit('error',e);}else{if(state.decoder&&!addToFront&&!encoding)chunk=state.decoder.write(chunk);if(!addToFront)state.reading=false;// if we want the data now, just emit it.\nif(state.flowing&&state.length===0&&!state.sync){stream.emit('data',chunk);stream.read(0);}else{// update the buffer info.\nstate.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.\nReadable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(20).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this;};// Don't raise the hwm > 128MB\nvar MAX_HWM=0x800000;function roundUpToNextPowerOf2(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2\nn--;for(var p=1;p<32;p<<=1){n|=n>>p;}n++;}return n;}function howMuchToRead(n,state){if(state.length===0&&state.ended)return 0;if(state.objectMode)return n===0?0:1;if(isNaN(n)||util.isNull(n)){// only flow one buffer at a time\nif(state.flowing&&state.buffer.length)return state.buffer[0].length;else return state.length;}if(n<=0)return 0;// If we're asking for more than the target buffer level,\n// then raise the water mark.  Bump up to the next highest\n// power of 2, to prevent increasing it excessively in tiny\n// amounts.\nif(n>state.highWaterMark)state.highWaterMark=roundUpToNextPowerOf2(n);// don't have that much.  return null, unless we've ended.\nif(n>state.length){if(!state.ended){state.needReadable=true;return 0;}else return state.length;}return n;}// you can override either this method, or the async _read(n) below.\nReadable.prototype.read=function(n){debug('read',n);var state=this._readableState;var nOrig=n;if(!util.isNumber(n)||n>0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we\n// already have a bunch of data in the buffer, then just trigger\n// the 'readable' event and move on.\nif(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.\nif(n===0&&state.ended){if(state.length===0)endReadable(this);return null;}// All the actual chunk generation logic needs to be\n// *below* the call to _read.  The reason is that in certain\n// synthetic stream cases, such as passthrough streams, _read\n// may be a completely synchronous operation which may change\n// the state of the read buffer, providing enough data when\n// before there was *not* enough.\n//\n// So, the steps are:\n// 1. Figure out what the state of things will be after we do\n// a read from the buffer.\n//\n// 2. If that resulting state will trigger a _read, then call _read.\n// Note that this may be asynchronous, or synchronous.  Yes, it is\n// deeply ugly to write APIs this way, but that still doesn't mean\n// that the Readable class should behave improperly, as streams are\n// designed to be sync/async agnostic.\n// Take note if the _read call is sync or async (ie, if the read call\n// has returned yet), so that we know whether or not it's safe to emit\n// 'readable' etc.\n//\n// 3. Actually pull the requested chunks out of the buffer and return.\n// if we need a readable event, then we need to do some reading.\nvar doRead=state.needReadable;debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some\nif(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already\n// reading, then it's unnecessary.\nif(state.ended||state.reading){doRead=false;debug('reading or ended',doRead);}if(doRead){debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.\nif(state.length===0)state.needReadable=true;// call internal read method\nthis._read(state.highWaterMark);state.sync=false;}// If _read pushed data synchronously, then `reading` will be false,\n// and we need to re-evaluate how much data we can return to the user.\nif(doRead&&!state.reading)n=howMuchToRead(nOrig,state);var ret;if(n>0)ret=fromList(n,state);else ret=null;if(util.isNull(ret)){state.needReadable=true;n=0;}state.length-=n;// If we have nothing in the buffer, then we want to know\n// as soon as we *do* get something into the buffer.\nif(state.length===0&&!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.\nif(nOrig!==n&&state.ended&&state.length===0)endReadable(this);if(!util.isNull(ret))this.emit('data',ret);return ret;};function chunkInvalid(state,chunk){var er=null;if(!util.isBuffer(chunk)&&!util.isString(chunk)&&!util.isNullOrUndefined(chunk)&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// emit 'readable' now to make sure it gets picked up.\nemitReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug('emitReadable',state.flowing);state.emittedReadable=true;if(state.sync)process.nextTick(function(){emitReadable_(stream);});else emitReadable_(stream);}}function emitReadable_(stream){debug('emit readable');stream.emit('readable');flow(stream);}// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;process.nextTick(function(){maybeReadMore_(stream,state);});}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.\nbreak;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read=function(n){this.emit('error',new Error('not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)process.nextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){debug('onunpipe');if(readable===src){cleanup();}}function onend(){debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter\n// on the source.  This would be more elegant with a .once()\n// handler in flow(), but adding and removing repeatedly is\n// too slow.\nvar ondrain=pipeOnDrain(src);dest.on('drain',ondrain);function cleanup(){debug('cleanup');// cleanup event handlers once the pipe is broken\ndest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);src.removeListener('data',ondata);// if the reader is waiting for a drain event from this\n// specific writer, then it would cause it to never start\n// flowing again.\n// So, if this is awaiting a drain, then we just call it now.\n// If we don't know, then assume that we are waiting for one.\nif(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}src.on('data',ondata);function ondata(chunk){debug('ondata');var ret=dest.write(chunk);if(false===ret){debug('false write response, pause',src._readableState.awaitDrain);src._readableState.awaitDrain++;src.pause();}}// if the dest has an error, then stop piping into it.\n// however, don't suppress the throwing behavior for this.\nfunction onerror(er){debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(EE.listenerCount(dest,'error')===0)dest.emit('error',er);}// This is a brutally ugly hack to make sure that our error handler\n// is attached before any userland ones.  NEVER DO THIS.\nif(!dest._events||!dest._events.error)dest.on('error',onerror);else if(isArray(dest._events.error))dest._events.error.unshift(onerror);else dest._events.error=[onerror,dest._events.error];// Both close and finish should trigger unpipe, but only once.\nfunction onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to\ndest.emit('pipe',src);// start the flow if it hasn't been started already.\nif(!state.flowing){debug('pipe resume');src.resume();}return dest;};function pipeOnDrain(src){return function(){var state=src._readableState;debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EE.listenerCount(src,'data')){state.flowing=true;flow(src);}};}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.\nif(state.pipesCount===0)return this;// just one destination.  most common case.\nif(state.pipesCount===1){// passed in one, but it's not the right one.\nif(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.\nstate.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.\nif(!dest){// remove all.\nvar dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var i=0;i<len;i++){dests[i].emit('unpipe',this);}return this;}// try to find the right one.\nvar i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);// If listening to data, and it has not explicitly been paused,\n// then call resume to start the flow of data on the next tick.\nif(ev==='data'&&false!==this._readableState.flowing){this.resume();}if(ev==='readable'&&this.readable){var state=this._readableState;if(!state.readableListening){state.readableListening=true;state.emittedReadable=false;state.needReadable=true;if(!state.reading){var self=this;process.nextTick(function(){debug('readable nexttick read 0');self.read(0);});}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug('resume');state.flowing=true;if(!state.reading){debug('resume read 0');this.read(0);}resume(this,state);}return this;};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;process.nextTick(function(){resume_(stream,state);});}}function resume_(stream,state){state.resumeScheduled=false;stream.emit('resume');flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug('call pause flowing=%j',this._readableState.flowing);if(false!==this._readableState.flowing){debug('pause');this._readableState.flowing=false;this.emit('pause');}return this;};function flow(stream){var state=stream._readableState;debug('flow',state.flowing);if(state.flowing){do{var chunk=stream.read();}while(null!==chunk&&state.flowing);}}// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);if(!chunk||!state.objectMode&&!chunk.length)return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.\n// important when wrapping filters and duplexes.\nfor(var i in stream){if(util.isFunction(stream[i])&&util.isUndefined(this[i])){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.\nvar events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the\n// underlying stream.\nself._read=function(n){debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.\nReadable._fromList=fromList;// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n,state){var list=state.buffer;var length=state.length;var stringMode=!!state.decoder;var objectMode=!!state.objectMode;var ret;// nothing in the list, definitely empty.\nif(list.length===0)return null;if(length===0)ret=null;else if(objectMode)ret=list.shift();else if(!n||n>=length){// read it all, truncate the array.\nif(stringMode)ret=list.join('');else ret=Buffer.concat(list,length);list.length=0;}else{// read just some of it.\nif(n<list[0].length){// just take a part of the first list item.\n// slice is the same for buffers and strings.\nvar buf=list[0];ret=buf.slice(0,n);list[0]=buf.slice(n);}else if(n===list[0].length){// first list is a perfect match\nret=list.shift();}else{// complex case.\n// we have enough to cover it, but it spans past the first buffer.\nif(stringMode)ret='';else ret=new Buffer(n);var c=0;for(var i=0,l=list.length;i<l&&c<n;i++){var buf=list[0];var cpy=Math.min(n-c,buf.length);if(stringMode)ret+=buf.slice(0,cpy);else buf.copy(ret,c,0,cpy);if(cpy<buf.length)list[0]=buf.slice(cpy);else list.shift();c+=cpy;}}}return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a\n// bug in node.  Should never happen.\nif(state.length>0)throw new Error('endReadable called on non-empty stream');if(!state.endEmitted){state.ended=true;process.nextTick(function(){// Check that we didn't get one last unshift.\nif(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}});}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 11 */ /***/function(module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};/***/},/* 12 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,global){/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */ /* eslint-disable no-proto */'use strict';var base64=__webpack_require__(13);var ieee754=__webpack_require__(14);var isArray=__webpack_require__(15);exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */Buffer.TYPED_ARRAY_SUPPORT=global.TYPED_ARRAY_SUPPORT!==undefined?global.TYPED_ARRAY_SUPPORT:typedArraySupport();/*\n\t * Export kMaxLength after typed array support is determined.\n\t */exports.kMaxLength=kMaxLength();function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function foo(){return 42;}};return arr.foo()===42&&// typed array instances can be augmented\ntypeof arr.subarray==='function'&&// chrome 9-10 lack `subarray`\narr.subarray(1,1).byteLength===0;// ie10 has broken `subarray`\n}catch(e){return false;}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}function createBuffer(that,length){if(kMaxLength()<length){throw new RangeError('Invalid typed array length');}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\nthat=new Uint8Array(length);that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class\nif(that===null){that=new Buffer(length);}that.length=length;}return that;}/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */function Buffer(arg,encodingOrOffset,length){if(!Buffer.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer)){return new Buffer(arg,encodingOrOffset,length);}// Common case.\nif(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new Error('If encoding is specified then the first argument must be a string');}return allocUnsafe(this,arg);}return from(this,arg,encodingOrOffset,length);}Buffer.poolSize=8192;// not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment=function(arr){arr.__proto__=Buffer.prototype;return arr;};function from(that,value,encodingOrOffset,length){if(typeof value==='number'){throw new TypeError('\"value\" argument must not be a number');}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){return fromArrayBuffer(that,value,encodingOrOffset,length);}if(typeof value==='string'){return fromString(that,value,encodingOrOffset);}return fromObject(that,value);}/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length);};if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;if(typeof Symbol!=='undefined'&&Symbol.species&&Buffer[Symbol.species]===Buffer){// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nObject.defineProperty(Buffer,Symbol.species,{value:null,configurable:true});}}function assertSize(size){if(typeof size!=='number'){throw new TypeError('\"size\" argument must be a number');}else if(size<0){throw new RangeError('\"size\" argument must not be negative');}}function alloc(that,size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(that,size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This\n// prevents accidentally sending in a number that would\n// be interpretted as a start offset.\nreturn typeof encoding==='string'?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill);}return createBuffer(that,size);}/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/Buffer.alloc=function(size,fill,encoding){return alloc(null,size,fill,encoding);};function allocUnsafe(that,size){assertSize(size);that=createBuffer(that,size<0?0:checked(size)|0);if(!Buffer.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0;}}return that;}/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */Buffer.allocUnsafe=function(size){return allocUnsafe(null,size);};/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size);};function fromString(that,string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer.isEncoding(encoding)){throw new TypeError('\"encoding\" must be a valid string encoding');}var length=byteLength(string,encoding)|0;that=createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will\n// cause everything after the first invalid character to be ignored. (e.g.\n// 'abxxcd' will be treated as 'ab')\nthat=that.slice(0,actual);}return that;}function fromArrayLike(that,array){var length=array.length<0?0:checked(array.length)|0;that=createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function fromArrayBuffer(that,array,byteOffset,length){array.byteLength;// this throws if `array` is not a valid ArrayBuffer\nif(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('\\'offset\\' is out of bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('\\'length\\' is out of bounds');}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array);}else if(length===undefined){array=new Uint8Array(array,byteOffset);}else{array=new Uint8Array(array,byteOffset,length);}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\nthat=array;that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class\nthat=fromArrayLike(that,array);}return that;}function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;that=createBuffer(that,len);if(that.length===0){return that;}obj.copy(that,0,0,len);return that;}if(obj){if(typeof ArrayBuffer!=='undefined'&&obj.buffer instanceof ArrayBuffer||'length'in obj){if(typeof obj.length!=='number'||isnan(obj.length)){return createBuffer(that,0);}return fromArrayLike(that,obj);}if(obj.type==='Buffer'&&isArray(obj.data)){return fromArrayLike(that,obj.data);}}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');}function checked(length){// Note: cannot use `length < kMaxLength()` here because that fails when\n// length is NaN (which is otherwise coerced to zero.)\nif(length>=kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+kMaxLength().toString(16)+' bytes');}return length|0;}function SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq\nlength=0;}return Buffer.alloc(+length);}Buffer.isBuffer=function isBuffer(b){return!!(b!=null&&b._isBuffer);};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!isArray(list)){throw new TypeError('\"list\" argument must be an Array of Buffers');}if(list.length===0){return Buffer.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf)){throw new TypeError('\"list\" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length;}if(typeof ArrayBuffer!=='undefined'&&typeof ArrayBuffer.isView==='function'&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){string=''+string;}var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion\nvar loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':case undefined:return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;// assume utf8\nencoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;// No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n// property of a typed array.\n// This behaves neither like String nor Uint8Array in that we set start/end\n// to their upper/lower bounds if the value passed is out of range.\n// undefined is handled specially as per ECMA-262 6th Edition,\n// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\nif(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32\n// coercion fail below.\nif(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.\nend>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'latin1':case'binary':return latin1Slice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this;};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this;};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this;};Buffer.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===0;};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target)){throw new TypeError('Argument must be a Buffer');}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match\nif(buffer.length===0)return-1;// Normalize byteOffset\nif(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.\nif(isNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\nbyteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer\nif(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val\nif(typeof val==='string'){val=Buffer.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf\nif(Buffer.isBuffer(val)){// Special case: looking for empty string/buffer always fails\nif(val.length===0){return-1;}return arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]\nif(Buffer.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits\nvar strLen=string.length;if(strLen%2!==0)throw new TypeError('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)\nif(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)\n}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])\n}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13\n}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'latin1':case'binary':return latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write\nreturn base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf);}else{return base64.fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a\n// replacement char (U+FFFD) and advance only 1 byte\ncodePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)\ncodePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()\n}// Decode in chunks to avoid \"call stack size exceeded\".\nvar res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;}else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start];}}return newBuf;};/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4);};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4);};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8);};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('\"value\" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done\nif(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions\nif(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?\nif(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end\nfor(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer.TYPED_ARRAY_SUPPORT){// ascending copy from start\nfor(i=0;i<len;++i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);}return len;};// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:\nif(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code;}}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.\nif(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS\n// ================\nvar INVALID_BASE64_RE=/[^+\\/0-9A-Za-z-_]/g;function base64clean(str){// Node strips out invalid characters like \\n and \\t from the string, base64-js does not\nstr=stringtrim(str).replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''\nif(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\nwhile(str.length%4!==0){str=str+'=';}return str;}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\\s+|\\s+$/g,'');}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component\nif(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead\nif(!leadSurrogate){// no lead yet\nif(codePoint>0xDBFF){// unexpected trail\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead\nleadSurrogate=codePoint;continue;}// 2 leads in a row\nif(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair\ncodePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8\nif(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..\nbyteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return base64.toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}function isnan(val){return val!==val;// eslint-disable-line no-self-compare\n}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer,function(){return this;}());/***/},/* 13 */ /***/function(module,exports){'use strict';exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}revLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;function placeHoldersCount(b64){var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// the number of equal signs (place holders)\n// if there are two placeholders, than the two characters before it\n// represent one byte\n// if there is only one, then the three characters before it represent 2 bytes\n// this is just a cheap hack to not do indexOf twice\nreturn b64[len-2]==='='?2:b64[len-1]==='='?1:0;}function byteLength(b64){// base64 is 4/3 + up to two characters of the original data\nreturn b64.length*3/4-placeHoldersCount(b64);}function toByteArray(b64){var i,j,l,tmp,placeHolders,arr;var len=b64.length;placeHolders=placeHoldersCount(b64);arr=new Arr(len*3/4-placeHolders);// if there are placeholders, only get up to the last complete 4 chars\nl=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[L++]=tmp>>16&0xFF;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}if(placeHolders===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[L++]=tmp&0xFF;}else if(placeHolders===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}return arr;}function tripletToBase64(num){return lookup[num>>18&0x3F]+lookup[num>>12&0x3F]+lookup[num>>6&0x3F]+lookup[num&0x3F];}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output.push(tripletToBase64(tmp));}return output.join('');}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes\nvar output='';var parts=[];var maxChunkLength=16383;// must be multiple of 3\n// go through the array every three bytes, we'll deal with trailing stuff later\nfor(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes\nif(extraBytes===1){tmp=uint8[len-1];output+=lookup[tmp>>2];output+=lookup[tmp<<4&0x3F];output+='==';}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];output+=lookup[tmp>>10];output+=lookup[tmp>>4&0x3F];output+=lookup[tmp<<2&0x3F];output+='=';}parts.push(output);return parts.join('');}/***/},/* 14 */ /***/function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};/***/},/* 15 */ /***/function(module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return toString.call(arr)=='[object Array]';};/***/},/* 16 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(arg){if(Array.isArray){return Array.isArray(arg);}return objectToString(arg)==='[object Array]';}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return _typeof(arg)==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return objectToString(e)==='[object Error]'||e instanceof Error;}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||_typeof(arg)==='symbol'||// ES6 symbol\ntypeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=Buffer.isBuffer;function objectToString(o){return Object.prototype.toString.call(o);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer);/***/},/* 17 */ /***/function(module,exports){/* (ignored) */ /***/},/* 18 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\nmodule.exports=Duplex;/*<replacement>*/var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/ /*<replacement>*/var util=__webpack_require__(16);util.inherits=__webpack_require__(8);/*</replacement>*/var Readable=__webpack_require__(10);var Writable=__webpack_require__(19);util.inherits(Duplex,Readable);forEach(objectKeys(Writable.prototype),function(method){if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];});function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer\nfunction onend(){// if we allow half-open state, or if the writable side ended,\n// then we're ok.\nif(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.\n// But allow more writes to happen in this tick.\nprocess.nextTick(this.end.bind(this));}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 19 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\nmodule.exports=Writable;/*<replacement>*/var Buffer=__webpack_require__(12).Buffer;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var util=__webpack_require__(16);util.inherits=__webpack_require__(8);/*</replacement>*/var Stream=__webpack_require__(6);util.inherits(Writable,Stream);function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;}function WritableState(options,stream){var Duplex=__webpack_require__(18);options=options||{};// the point at which write() starts returning false\n// Note: 0 is a valid value, means that we always return false if\n// the entire buffer is not flushed immediately on write()\nvar hwm=options.highWaterMark;var defaultHwm=options.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// object stream flag to indicate whether or not this stream\n// contains buffers or objects.\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.needDrain=false;// at the start of calling end()\nthis.ending=false;// when end() has been called, and returned\nthis.ended=false;// when 'finish' is emitted\nthis.finished=false;// should we decode strings into buffers before passing to _write?\n// this is here so that some node-core streams can optimize string\n// handling at a lower level.\nvar noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement\n// of how much we're waiting to get pushed to some underlying\n// socket or file.\nthis.length=0;// a flag to see when we're in the middle of a write.\nthis.writing=false;// when true all writes will be buffered until .uncork() call\nthis.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// a flag to know if we're processing previously buffered items, which\n// may call the _write() callback in the same tick, so that we don't\n// end up in an overlapped onwrite situation.\nthis.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)\nthis.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)\nthis.writecb=null;// the amount that is being written when _write is called.\nthis.writelen=0;this.buffer=[];// number of pending user-supplied write callbacks\n// this must be 0 before 'finish' can be emitted\nthis.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs\n// This is relevant for synchronous Transform streams\nthis.prefinished=false;// True if the error was already emitted and should not be thrown again\nthis.errorEmitted=false;}function Writable(options){var Duplex=__webpack_require__(18);// Writable ctor is applied to Duplexes, though they're not\n// instanceof Writable, they're instanceof Readable.\nif(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);// legacy.\nthis.writable=true;Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe. Not readable.'));};function writeAfterEnd(stream,state,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb\nstream.emit('error',er);process.nextTick(function(){cb(er);});}// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream,state,chunk,cb){var valid=true;if(!util.isBuffer(chunk)&&!util.isString(chunk)&&!util.isNullOrUndefined(chunk)&&!state.objectMode){var er=new TypeError('Invalid non-string/buffer chunk');stream.emit('error',er);process.nextTick(function(){cb(er);});valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(util.isFunction(encoding)){cb=encoding;encoding=null;}if(util.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(!util.isFunction(cb))cb=function cb(){};if(state.ended)writeAfterEnd(this,state,cb);else if(validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){var state=this._writableState;state.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.buffer.length)clearBuffer(this,state);}};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&util.isString(chunk)){chunk=new Buffer(chunk,encoding);}return chunk;}// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(util.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.\nif(!ret)state.needDrain=true;if(state.writing||state.corked)state.buffer.push(new WriteReq(chunk,encoding,cb));else doWrite(stream,state,false,len,chunk,encoding,cb);return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){if(sync)process.nextTick(function(){state.pendingcb--;cb(er);});else{state.pendingcb--;cb(er);}stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet\nvar finished=needFinish(stream,state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.buffer.length){clearBuffer(stream,state);}if(sync){process.nextTick(function(){afterWrite(stream,state,finished,cb);});}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream,state){state.bufferProcessing=true;if(stream._writev&&state.buffer.length>1){// Fast case, write everything using _writev()\nvar cbs=[];for(var c=0;c<state.buffer.length;c++){cbs.push(state.buffer[c].callback);}// count the one we are adding, as well.\n// TODO(isaacs) clean this up\nstate.pendingcb++;doWrite(stream,state,true,state.length,state.buffer,'',function(err){for(var i=0;i<cbs.length;i++){state.pendingcb--;cbs[i](err);}});// Clear buffer\nstate.buffer=[];}else{// Slow case, write chunks one-by-one\nfor(var c=0;c<state.buffer.length;c++){var entry=state.buffer[c];var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);// if we didn't call the onwrite immediately, then\n// it means that we need to wait until it does.\n// also, that means that the chunk and cb are currently\n// being processed, so move the buffer counter past them.\nif(state.writing){c++;break;}}if(c<state.buffer.length)state.buffer=state.buffer.slice(c);else state.buffer.length=0;}state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('not implemented'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(util.isFunction(chunk)){cb=chunk;chunk=null;encoding=null;}else if(util.isFunction(encoding)){cb=encoding;encoding=null;}if(!util.isNullOrUndefined(chunk))this.write(chunk,encoding);// .end() fully uncorks\nif(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.\nif(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(stream,state){return state.ending&&state.length===0&&!state.finished&&!state.writing;}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit('prefinish');}}function finishMaybe(stream,state){var need=needFinish(stream,state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit('finish');}else prefinish(stream,state);}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)process.nextTick(cb);else stream.once('finish',cb);}state.ended=true;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 20 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar Buffer=__webpack_require__(12).Buffer;var isBufferEncoding=Buffer.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error('Unknown encoding: '+encoding);}}// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder=exports.StringDecoder=function(encoding){this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');assertEncoding(encoding);switch(this.encoding){case'utf8':// CESU-8 represents each of Surrogate Pair by 3-bytes\nthis.surrogateSize=3;break;case'ucs2':case'utf16le':// UTF-16 represents each of Surrogate Pair by 2-bytes\nthis.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case'base64':// Base-64 stores 3 bytes in 4 chars, and pads the remainder.\nthis.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return;}// Enough space to store all bytes of a single character. UTF-8 needs 4\n// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\nthis.charBuffer=new Buffer(6);// Number of bytes received for the current incomplete multi-byte character.\nthis.charReceived=0;// Number of bytes expected for the current incomplete multi-byte character.\nthis.charLength=0;};// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write=function(buffer){var charStr='';// if our last write ended with an incomplete multibyte character\nwhile(this.charLength){// determine how many remaining bytes this buffer has to offer for this char\nvar available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;// add the new bytes to the char buffer\nbuffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){// still not enough chars in this buffer? wait for more ...\nreturn'';}// remove bytes belonging to the current character from the buffer\nbuffer=buffer.slice(available,buffer.length);// get the character that was split\ncharStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\nvar charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=0xD800&&charCode<=0xDBFF){this.charLength+=this.surrogateSize;charStr='';continue;}this.charReceived=this.charLength=0;// if there are no more bytes in this buffer, just emit our char\nif(buffer.length===0){return charStr;}break;}// determine and set charLength / charReceived\nthis.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){// buffer the incomplete character bytes we got\nbuffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived;}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\nif(charCode>=0xD800&&charCode<=0xDBFF){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end);}// or just emit the charStr\nreturn charStr;};// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar=function(buffer){// determine how many bytes we have to check at the end of this buffer\nvar i=buffer.length>=3?3:buffer.length;// Figure out if one of the last i bytes of our buffer announces an\n// incomplete char.\nfor(;i>0;i--){var c=buffer[buffer.length-i];// See http://en.wikipedia.org/wiki/UTF-8#Description\n// 110XXXXX\nif(i==1&&c>>5==0x06){this.charLength=2;break;}// 1110XXXX\nif(i<=2&&c>>4==0x0E){this.charLength=3;break;}// 11110XXX\nif(i<=3&&c>>3==0x1E){this.charLength=4;break;}}this.charReceived=i;};StringDecoder.prototype.end=function(buffer){var res='';if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc);}return res;};function passThroughWrite(buffer){return buffer.toString(this.encoding);}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0;}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0;}/***/},/* 21 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\nmodule.exports=Transform;var Duplex=__webpack_require__(18);/*<replacement>*/var util=__webpack_require__(16);util.inherits=__webpack_require__(8);/*</replacement>*/util.inherits(Transform,Duplex);function TransformState(options,stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(!util.isNullOrUndefined(data))stream.push(data);if(cb)cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(options,this);// when the writable side finishes, then flush out anything remaining.\nvar stream=this;// start out asking for a readable event once data is transformed.\nthis._readableState.needReadable=true;// we have implemented the _read method, and done the other things\n// that Readable wants before the first _read call, so unset the\n// sync guard flag.\nthis._readableState.sync=false;this.once('prefinish',function(){if(util.isFunction(this._flush))this._flush(function(er){done(stream,er);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform=function(chunk,encoding,cb){throw new Error('not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read=function(n){var ts=this._transformState;if(!util.isNull(ts.writechunk)&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in\n// will get processed, now that we've asked for it.\nts.needTransform=true;}};function done(stream,er){if(er)return stream.emit('error',er);// if there's nothing in the write buffer, then that means\n// that nothing more will ever be provided\nvar ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error('calling transform done when ws.length != 0');if(ts.transforming)throw new Error('calling transform done when still transforming');return stream.push(null);}/***/},/* 22 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\nmodule.exports=PassThrough;var Transform=__webpack_require__(21);/*<replacement>*/var util=__webpack_require__(16);util.inherits=__webpack_require__(8);/*</replacement>*/util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};/***/},/* 23 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(19);/***/},/* 24 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(18);/***/},/* 25 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(21);/***/},/* 26 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(22);/***/},/* 27 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports=Readable;/*<replacement>*/var isArray=__webpack_require__(28);/*</replacement>*/ /*<replacement>*/var Buffer=__webpack_require__(29).Buffer;/*</replacement>*/Readable.ReadableState=ReadableState;var EE=__webpack_require__(3).EventEmitter;/*<replacement>*/if(!EE.listenerCount)EE.listenerCount=function(emitter,type){return emitter.listeners(type).length;};/*</replacement>*/var Stream=__webpack_require__(6);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/var StringDecoder;util.inherits(Readable,Stream);function ReadableState(options,stream){options=options||{};// the point at which it stops calling _read() to fill the buffer\n// Note: 0 is a valid value, means \"don't call _read preemptively ever\"\nvar hwm=options.highWaterMark;this.highWaterMark=hwm||hwm===0?hwm:16*1024;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.buffer=[];this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=false;this.ended=false;this.endEmitted=false;this.reading=false;// In streams that never have any data, and do push(null) right away,\n// the consumer can miss the 'end' event if they do some I/O before\n// consuming the stream.  So, we don't emit('end') until some reading\n// happens.\nthis.calledRead=false;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, becuase any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// whenever we return null, then we set a flag to say\n// that we're awaiting a 'readable' event emission.\nthis.needReadable=false;this.emittedReadable=false;this.readableListening=false;// object stream flag. Used to make read(n) ignore n and to\n// make all the buffer merging and length checks go away\nthis.objectMode=!!options.objectMode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen\n// after read()ing all the bytes and not getting any pushback.\nthis.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s\nthis.awaitDrain=0;// if true, a maybeReadMore has been scheduled\nthis.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}function Readable(options){if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy\nthis.readable=true;Stream.call(this);}// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push=function(chunk,encoding){var state=this._readableState;if(typeof chunk==='string'&&!state.objectMode){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=new Buffer(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(chunk===null||chunk===undefined){state.reading=false;if(!state.ended)onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var e=new Error('stream.unshift() after end event');stream.emit('error',e);}else{if(state.decoder&&!addToFront&&!encoding)chunk=state.decoder.write(chunk);// update the buffer info.\nstate.length+=state.objectMode?1:chunk.length;if(addToFront){state.buffer.unshift(chunk);}else{state.reading=false;state.buffer.push(chunk);}if(state.needReadable)emitReadable(stream);maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.\nReadable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;};// Don't raise the hwm > 128MB\nvar MAX_HWM=0x800000;function roundUpToNextPowerOf2(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2\nn--;for(var p=1;p<32;p<<=1){n|=n>>p;}n++;}return n;}function howMuchToRead(n,state){if(state.length===0&&state.ended)return 0;if(state.objectMode)return n===0?0:1;if(n===null||isNaN(n)){// only flow one buffer at a time\nif(state.flowing&&state.buffer.length)return state.buffer[0].length;else return state.length;}if(n<=0)return 0;// If we're asking for more than the target buffer level,\n// then raise the water mark.  Bump up to the next highest\n// power of 2, to prevent increasing it excessively in tiny\n// amounts.\nif(n>state.highWaterMark)state.highWaterMark=roundUpToNextPowerOf2(n);// don't have that much.  return null, unless we've ended.\nif(n>state.length){if(!state.ended){state.needReadable=true;return 0;}else return state.length;}return n;}// you can override either this method, or the async _read(n) below.\nReadable.prototype.read=function(n){var state=this._readableState;state.calledRead=true;var nOrig=n;var ret;if(typeof n!=='number'||n>0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we\n// already have a bunch of data in the buffer, then just trigger\n// the 'readable' event and move on.\nif(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.\nif(n===0&&state.ended){ret=null;// In cases where the decoder did not receive enough data\n// to produce a full chunk, then immediately received an\n// EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n// howMuchToRead will see this and coerce the amount to\n// read to zero (because it's looking at the length of the\n// first <Buffer > in state.buffer), and we'll end up here.\n//\n// This can only happen via state.decoder -- no other venue\n// exists for pushing a zero-length chunk into state.buffer\n// and triggering this behavior. In this case, we return our\n// remaining data and end the stream, if appropriate.\nif(state.length>0&&state.decoder){ret=fromList(n,state);state.length-=ret.length;}if(state.length===0)endReadable(this);return ret;}// All the actual chunk generation logic needs to be\n// *below* the call to _read.  The reason is that in certain\n// synthetic stream cases, such as passthrough streams, _read\n// may be a completely synchronous operation which may change\n// the state of the read buffer, providing enough data when\n// before there was *not* enough.\n//\n// So, the steps are:\n// 1. Figure out what the state of things will be after we do\n// a read from the buffer.\n//\n// 2. If that resulting state will trigger a _read, then call _read.\n// Note that this may be asynchronous, or synchronous.  Yes, it is\n// deeply ugly to write APIs this way, but that still doesn't mean\n// that the Readable class should behave improperly, as streams are\n// designed to be sync/async agnostic.\n// Take note if the _read call is sync or async (ie, if the read call\n// has returned yet), so that we know whether or not it's safe to emit\n// 'readable' etc.\n//\n// 3. Actually pull the requested chunks out of the buffer and return.\n// if we need a readable event, then we need to do some reading.\nvar doRead=state.needReadable;// if we currently have less than the highWaterMark, then also read some\nif(state.length-n<=state.highWaterMark)doRead=true;// however, if we've ended, then there's no point, and if we're already\n// reading, then it's unnecessary.\nif(state.ended||state.reading)doRead=false;if(doRead){state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.\nif(state.length===0)state.needReadable=true;// call internal read method\nthis._read(state.highWaterMark);state.sync=false;}// If _read called its callback synchronously, then `reading`\n// will be false, and we need to re-evaluate how much data we\n// can return to the user.\nif(doRead&&!state.reading)n=howMuchToRead(nOrig,state);if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0;}state.length-=n;// If we have nothing in the buffer, then we want to know\n// as soon as we *do* get something into the buffer.\nif(state.length===0&&!state.ended)state.needReadable=true;// If we happened to read() exactly the remaining amount in the\n// buffer, and the EOF has been seen at this point, then make sure\n// that we emit 'end' on the very next tick.\nif(state.ended&&!state.endEmitted&&state.length===0)endReadable(this);return ret;};function chunkInvalid(state,chunk){var er=null;if(!Buffer.isBuffer(chunk)&&'string'!==typeof chunk&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// if we've ended and we have some data left, then emit\n// 'readable' now to make sure it gets picked up.\nif(state.length>0)emitReadable(stream);else endReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(state.emittedReadable)return;state.emittedReadable=true;if(state.sync)process.nextTick(function(){emitReadable_(stream);});else emitReadable_(stream);}function emitReadable_(stream){stream.emit('readable');}// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;process.nextTick(function(){maybeReadMore_(stream,state);});}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){stream.read(0);if(len===state.length)// didn't get any data, stop spinning.\nbreak;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read=function(n){this.emit('error',new Error('not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)process.nextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){if(readable!==src)return;cleanup();}function onend(){dest.end();}// when the dest drains, it reduces the awaitDrain counter\n// on the source.  This would be more elegant with a .once()\n// handler in flow(), but adding and removing repeatedly is\n// too slow.\nvar ondrain=pipeOnDrain(src);dest.on('drain',ondrain);function cleanup(){// cleanup event handlers once the pipe is broken\ndest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);// if the reader is waiting for a drain event from this\n// specific writer, then it would cause it to never start\n// flowing again.\n// So, if this is awaiting a drain, then we just call it now.\n// If we don't know, then assume that we are waiting for one.\nif(!dest._writableState||dest._writableState.needDrain)ondrain();}// if the dest has an error, then stop piping into it.\n// however, don't suppress the throwing behavior for this.\nfunction onerror(er){unpipe();dest.removeListener('error',onerror);if(EE.listenerCount(dest,'error')===0)dest.emit('error',er);}// This is a brutally ugly hack to make sure that our error handler\n// is attached before any userland ones.  NEVER DO THIS.\nif(!dest._events||!dest._events.error)dest.on('error',onerror);else if(isArray(dest._events.error))dest._events.error.unshift(onerror);else dest._events.error=[onerror,dest._events.error];// Both close and finish should trigger unpipe, but only once.\nfunction onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){src.unpipe(dest);}// tell the dest that it's being piped to\ndest.emit('pipe',src);// start the flow if it hasn't been started already.\nif(!state.flowing){// the handler that waits for readable events after all\n// the data gets sucked out in flow.\n// This would be easier to follow with a .once() handler\n// in flow(), but that is too slow.\nthis.on('readable',pipeOnReadable);state.flowing=true;process.nextTick(function(){flow(src);});}return dest;};function pipeOnDrain(src){return function(){var dest=this;var state=src._readableState;state.awaitDrain--;if(state.awaitDrain===0)flow(src);};}function flow(src){var state=src._readableState;var chunk;state.awaitDrain=0;function write(dest,i,list){var written=dest.write(chunk);if(false===written){state.awaitDrain++;}}while(state.pipesCount&&null!==(chunk=src.read())){if(state.pipesCount===1)write(state.pipes,0,null);else forEach(state.pipes,write);src.emit('data',chunk);// if anyone needs a drain, then we have to wait for that.\nif(state.awaitDrain>0)return;}// if every destination was unpiped, either before entering this\n// function, or in the while loop, then stop flowing.\n//\n// NB: This is a pretty rare edge case.\nif(state.pipesCount===0){state.flowing=false;// if there were data event listeners added, then switch to old mode.\nif(EE.listenerCount(src,'data')>0)emitDataEvents(src);return;}// at this point, no one needed a drain, so we just ran out of data\n// on the next readable event, start it over again.\nstate.ranOut=true;}function pipeOnReadable(){if(this._readableState.ranOut){this._readableState.ranOut=false;flow(this);}}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.\nif(state.pipesCount===0)return this;// just one destination.  most common case.\nif(state.pipesCount===1){// passed in one, but it's not the right one.\nif(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.\nstate.pipes=null;state.pipesCount=0;this.removeListener('readable',pipeOnReadable);state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.\nif(!dest){// remove all.\nvar dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;this.removeListener('readable',pipeOnReadable);state.flowing=false;for(var i=0;i<len;i++){dests[i].emit('unpipe',this);}return this;}// try to find the right one.\nvar i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);if(ev==='data'&&!this._readableState.flowing)emitDataEvents(this);if(ev==='readable'&&this.readable){var state=this._readableState;if(!state.readableListening){state.readableListening=true;state.emittedReadable=false;state.needReadable=true;if(!state.reading){this.read(0);}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume=function(){emitDataEvents(this);this.read(0);this.emit('resume');};Readable.prototype.pause=function(){emitDataEvents(this,true);this.emit('pause');};function emitDataEvents(stream,startPaused){var state=stream._readableState;if(state.flowing){// https://github.com/isaacs/readable-stream/issues/16\nthrow new Error('Cannot switch to old mode now.');}var paused=startPaused||false;var readable=false;// convert to an old-style stream.\nstream.readable=true;stream.pipe=Stream.prototype.pipe;stream.on=stream.addListener=Stream.prototype.on;stream.on('readable',function(){readable=true;var c;while(!paused&&null!==(c=stream.read())){stream.emit('data',c);}if(c===null){readable=false;stream._readableState.needReadable=true;}});stream.pause=function(){paused=true;this.emit('pause');};stream.resume=function(){paused=false;if(readable)process.nextTick(function(){stream.emit('readable');});else this.read(0);this.emit('resume');};// now make it start, just in case it hadn't already.\nstream.emit('readable');}// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode\n//if (state.objectMode && util.isNullOrUndefined(chunk))\nif(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.\n// important when wrapping filters and duplexes.\nfor(var i in stream){if(typeof stream[i]==='function'&&typeof this[i]==='undefined'){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.\nvar events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the\n// underlying stream.\nself._read=function(n){if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.\nReadable._fromList=fromList;// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n,state){var list=state.buffer;var length=state.length;var stringMode=!!state.decoder;var objectMode=!!state.objectMode;var ret;// nothing in the list, definitely empty.\nif(list.length===0)return null;if(length===0)ret=null;else if(objectMode)ret=list.shift();else if(!n||n>=length){// read it all, truncate the array.\nif(stringMode)ret=list.join('');else ret=Buffer.concat(list,length);list.length=0;}else{// read just some of it.\nif(n<list[0].length){// just take a part of the first list item.\n// slice is the same for buffers and strings.\nvar buf=list[0];ret=buf.slice(0,n);list[0]=buf.slice(n);}else if(n===list[0].length){// first list is a perfect match\nret=list.shift();}else{// complex case.\n// we have enough to cover it, but it spans past the first buffer.\nif(stringMode)ret='';else ret=new Buffer(n);var c=0;for(var i=0,l=list.length;i<l&&c<n;i++){var buf=list[0];var cpy=Math.min(n-c,buf.length);if(stringMode)ret+=buf.slice(0,cpy);else buf.copy(ret,c,0,cpy);if(cpy<buf.length)list[0]=buf.slice(cpy);else list.shift();c+=cpy;}}}return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a\n// bug in node.  Should never happen.\nif(state.length>0)throw new Error('endReadable called on non-empty stream');if(!state.endEmitted&&state.calledRead){state.ended=true;process.nextTick(function(){// Check that we didn't get one last unshift.\nif(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}});}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 28 */ /***/function(module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};/***/},/* 29 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,global){/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */ /* eslint-disable no-proto */'use strict';var base64=__webpack_require__(30);var ieee754=__webpack_require__(31);var isArray=__webpack_require__(32);exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;Buffer.poolSize=8192;// not used by this implementation\nvar rootParent={};/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */Buffer.TYPED_ARRAY_SUPPORT=global.TYPED_ARRAY_SUPPORT!==undefined?global.TYPED_ARRAY_SUPPORT:typedArraySupport();function typedArraySupport(){function Bar(){}try{var arr=new Uint8Array(1);arr.foo=function(){return 42;};arr.constructor=Bar;return arr.foo()===42&&// typed array instances can be augmented\narr.constructor===Bar&&// constructor can be set\ntypeof arr.subarray==='function'&&// chrome 9-10 lack `subarray`\narr.subarray(1,1).byteLength===0;// ie10 has broken `subarray`\n}catch(e){return false;}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */function Buffer(arg){if(!(this instanceof Buffer)){// Avoid going through an ArgumentsAdaptorTrampoline in the common case.\nif(arguments.length>1)return new Buffer(arg,arguments[1]);return new Buffer(arg);}if(!Buffer.TYPED_ARRAY_SUPPORT){this.length=0;this.parent=undefined;}// Common case.\nif(typeof arg==='number'){return fromNumber(this,arg);}// Slightly less common case.\nif(typeof arg==='string'){return fromString(this,arg,arguments.length>1?arguments[1]:'utf8');}// Unusual.\nreturn fromObject(this,arg);}function fromNumber(that,length){that=allocate(that,length<0?0:checked(length)|0);if(!Buffer.TYPED_ARRAY_SUPPORT){for(var i=0;i<length;i++){that[i]=0;}}return that;}function fromString(that,string,encoding){if(typeof encoding!=='string'||encoding==='')encoding='utf8';// Assumption: byteLength() return value is always < kMaxLength.\nvar length=byteLength(string,encoding)|0;that=allocate(that,length);that.write(string,encoding);return that;}function fromObject(that,object){if(Buffer.isBuffer(object))return fromBuffer(that,object);if(isArray(object))return fromArray(that,object);if(object==null){throw new TypeError('must start with number, buffer, array or string');}if(typeof ArrayBuffer!=='undefined'){if(object.buffer instanceof ArrayBuffer){return fromTypedArray(that,object);}if(object instanceof ArrayBuffer){return fromArrayBuffer(that,object);}}if(object.length)return fromArrayLike(that,object);return fromJsonObject(that,object);}function fromBuffer(that,buffer){var length=checked(buffer.length)|0;that=allocate(that,length);buffer.copy(that,0,0,length);return that;}function fromArray(that,array){var length=checked(array.length)|0;that=allocate(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray(that,array){var length=checked(array.length)|0;that=allocate(that,length);// Truncating the elements is probably not what people expect from typed\n// arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n// of the old Buffer constructor.\nfor(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function fromArrayBuffer(that,array){if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\narray.byteLength;that=Buffer._augment(new Uint8Array(array));}else{// Fallback: Return an object instance of the Buffer class\nthat=fromTypedArray(that,new Uint8Array(array));}return that;}function fromArrayLike(that,array){var length=checked(array.length)|0;that=allocate(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject(that,object){var array;var length=0;if(object.type==='Buffer'&&isArray(object.data)){array=object.data;length=checked(array.length)|0;}that=allocate(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;}else{// pre-set for values that may exist in the future\nBuffer.prototype.length=undefined;Buffer.prototype.parent=undefined;}function allocate(that,length){if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\nthat=Buffer._augment(new Uint8Array(length));that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class\nthat.length=length;that._isBuffer=true;}var fromPool=length!==0&&length<=Buffer.poolSize>>>1;if(fromPool)that.parent=rootParent;return that;}function checked(length){// Note: cannot use `length < kMaxLength` here because that fails when\n// length is NaN (which is otherwise coerced to zero.)\nif(length>=kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+kMaxLength().toString(16)+' bytes');}return length|0;}function SlowBuffer(subject,encoding){if(!(this instanceof SlowBuffer))return new SlowBuffer(subject,encoding);var buf=new Buffer(subject,encoding);delete buf.parent;return buf;}Buffer.isBuffer=function isBuffer(b){return!!(b!=null&&b._isBuffer);};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;var i=0;var len=Math.min(x,y);while(i<len){if(a[i]!==b[i])break;++i;}if(i!==len){x=a[i];y=b[i];}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'raw':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!isArray(list))throw new TypeError('list argument must be an Array of Buffers.');if(list.length===0){return new Buffer(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;i++){length+=list[i].length;}}var buf=new Buffer(length);var pos=0;for(i=0;i<list.length;i++){var item=list[i];item.copy(buf,pos);pos+=item.length;}return buf;};function byteLength(string,encoding){if(typeof string!=='string')string=''+string;var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion\nvar loweredCase=false;for(;;){switch(encoding){case'ascii':case'binary':// Deprecated\ncase'raw':case'raws':return len;case'utf8':case'utf-8':return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;// assume utf8\nencoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;start=start|0;end=end===undefined||end===Infinity?this.length:end|0;if(!encoding)encoding='utf8';if(start<0)start=0;if(end>this.length)end=this.length;if(end<=start)return'';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'binary':return binarySlice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}Buffer.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===0;};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer.prototype.compare=function compare(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return 0;return Buffer.compare(this,b);};Buffer.prototype.indexOf=function indexOf(val,byteOffset){if(byteOffset>0x7fffffff)byteOffset=0x7fffffff;else if(byteOffset<-0x80000000)byteOffset=-0x80000000;byteOffset>>=0;if(this.length===0)return-1;if(byteOffset>=this.length)return-1;// Negative offsets start from the end of the buffer\nif(byteOffset<0)byteOffset=Math.max(this.length+byteOffset,0);if(typeof val==='string'){if(val.length===0)return-1;// special case: looking for empty string always fails\nreturn String.prototype.indexOf.call(this,val,byteOffset);}if(Buffer.isBuffer(val)){return arrayIndexOf(this,val,byteOffset);}if(typeof val==='number'){if(Buffer.TYPED_ARRAY_SUPPORT&&Uint8Array.prototype.indexOf==='function'){return Uint8Array.prototype.indexOf.call(this,val,byteOffset);}return arrayIndexOf(this,[val],byteOffset);}function arrayIndexOf(arr,val,byteOffset){var foundIndex=-1;for(var i=0;byteOffset+i<arr.length;i++){if(arr[byteOffset+i]===val[foundIndex===-1?0:i-foundIndex]){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===val.length)return byteOffset+foundIndex;}else{foundIndex=-1;}}return-1;}throw new TypeError('val must be string, number or Buffer');};// `get` is deprecated\nBuffer.prototype.get=function get(offset){console.log('.get() is deprecated. Access using array indexes instead.');return this.readUInt8(offset);};// `set` is deprecated\nBuffer.prototype.set=function set(v,offset){console.log('.set() is deprecated. Access using array indexes instead.');return this.writeUInt8(v,offset);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits\nvar strLen=string.length;if(strLen%2!==0)throw new Error('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;i++){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))throw new Error('Invalid hex string');buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function binaryWrite(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)\nif(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)\n}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])\n}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13\n}else{var swap=encoding;encoding=offset;offset=length|0;length=swap;}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'binary':return binaryWrite(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write\nreturn base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf);}else{return base64.fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a\n// replacement char (U+FFFD) and advance only 1 byte\ncodePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)\ncodePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()\n}// Decode in chunks to avoid \"call stack size exceeded\".\nvar res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;i++){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function binarySlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;i++){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;i++){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT){newBuf=Buffer._augment(this.subarray(start,end));}else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,undefined);for(var i=0;i<sliceLen;i++){newBuf[i]=this[i+start];}}if(newBuf.length)newBuf.parent=this.parent||this;return newBuf;};/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4);};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4);};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8);};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('buffer must be a Buffer instance');if(value>max||value<min)throw new RangeError('value is out of bounds');if(offset+ext>buf.length)throw new RangeError('index out of range');}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength),0);var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength),0);var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;i++){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;i++){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=value<0?1:0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=value<0?1:0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(value>max||value<min)throw new RangeError('value is out of bounds');if(offset+ext>buf.length)throw new RangeError('index out of range');if(offset<0)throw new RangeError('index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done\nif(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions\nif(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?\nif(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end\nfor(i=len-1;i>=0;i--){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer.TYPED_ARRAY_SUPPORT){// ascending copy from start\nfor(i=0;i<len;i++){target[i+targetStart]=this[i+start];}}else{target._set(this.subarray(start,start+len),targetStart);}return len;};// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill=function fill(value,start,end){if(!value)value=0;if(!start)start=0;if(!end)end=this.length;if(end<start)throw new RangeError('end < start');// Fill 0 bytes; we're done\nif(end===start)return;if(this.length===0)return;if(start<0||start>=this.length)throw new RangeError('start out of bounds');if(end<0||end>this.length)throw new RangeError('end out of bounds');var i;if(typeof value==='number'){for(i=start;i<end;i++){this[i]=value;}}else{var bytes=utf8ToBytes(value.toString());var len=bytes.length;for(i=start;i<end;i++){this[i]=bytes[i%len];}}return this;};/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */Buffer.prototype.toArrayBuffer=function toArrayBuffer(){if(typeof Uint8Array!=='undefined'){if(Buffer.TYPED_ARRAY_SUPPORT){return new Buffer(this).buffer;}else{var buf=new Uint8Array(this.length);for(var i=0,len=buf.length;i<len;i+=1){buf[i]=this[i];}return buf.buffer;}}else{throw new TypeError('Buffer.toArrayBuffer not supported in this browser');}};// HELPER FUNCTIONS\n// ================\nvar BP=Buffer.prototype;/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */Buffer._augment=function _augment(arr){arr.constructor=Buffer;arr._isBuffer=true;// save reference to original Uint8Array set method before overwriting\narr._set=arr.set;// deprecated\narr.get=BP.get;arr.set=BP.set;arr.write=BP.write;arr.toString=BP.toString;arr.toLocaleString=BP.toString;arr.toJSON=BP.toJSON;arr.equals=BP.equals;arr.compare=BP.compare;arr.indexOf=BP.indexOf;arr.copy=BP.copy;arr.slice=BP.slice;arr.readUIntLE=BP.readUIntLE;arr.readUIntBE=BP.readUIntBE;arr.readUInt8=BP.readUInt8;arr.readUInt16LE=BP.readUInt16LE;arr.readUInt16BE=BP.readUInt16BE;arr.readUInt32LE=BP.readUInt32LE;arr.readUInt32BE=BP.readUInt32BE;arr.readIntLE=BP.readIntLE;arr.readIntBE=BP.readIntBE;arr.readInt8=BP.readInt8;arr.readInt16LE=BP.readInt16LE;arr.readInt16BE=BP.readInt16BE;arr.readInt32LE=BP.readInt32LE;arr.readInt32BE=BP.readInt32BE;arr.readFloatLE=BP.readFloatLE;arr.readFloatBE=BP.readFloatBE;arr.readDoubleLE=BP.readDoubleLE;arr.readDoubleBE=BP.readDoubleBE;arr.writeUInt8=BP.writeUInt8;arr.writeUIntLE=BP.writeUIntLE;arr.writeUIntBE=BP.writeUIntBE;arr.writeUInt16LE=BP.writeUInt16LE;arr.writeUInt16BE=BP.writeUInt16BE;arr.writeUInt32LE=BP.writeUInt32LE;arr.writeUInt32BE=BP.writeUInt32BE;arr.writeIntLE=BP.writeIntLE;arr.writeIntBE=BP.writeIntBE;arr.writeInt8=BP.writeInt8;arr.writeInt16LE=BP.writeInt16LE;arr.writeInt16BE=BP.writeInt16BE;arr.writeInt32LE=BP.writeInt32LE;arr.writeInt32BE=BP.writeInt32BE;arr.writeFloatLE=BP.writeFloatLE;arr.writeFloatBE=BP.writeFloatBE;arr.writeDoubleLE=BP.writeDoubleLE;arr.writeDoubleBE=BP.writeDoubleBE;arr.fill=BP.fill;arr.inspect=BP.inspect;arr.toArrayBuffer=BP.toArrayBuffer;return arr;};var INVALID_BASE64_RE=/[^+\\/0-9A-Za-z-_]/g;function base64clean(str){// Node strips out invalid characters like \\n and \\t from the string, base64-js does not\nstr=stringtrim(str).replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''\nif(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\nwhile(str.length%4!==0){str=str+'=';}return str;}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\\s+|\\s+$/g,'');}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;i++){codePoint=string.charCodeAt(i);// is surrogate component\nif(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead\nif(!leadSurrogate){// no lead yet\nif(codePoint>0xDBFF){// unexpected trail\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead\nleadSurrogate=codePoint;continue;}// 2 leads in a row\nif(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair\ncodePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8\nif(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;i++){// Node's code seems to be doing this and not & 0x7F..\nbyteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;i++){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return base64.toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;i++){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer,function(){return this;}());/***/},/* 30 */ /***/function(module,exports,__webpack_require__){var lookup='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';;(function(exports){'use strict';var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var PLUS='+'.charCodeAt(0);var SLASH='/'.charCodeAt(0);var NUMBER='0'.charCodeAt(0);var LOWER='a'.charCodeAt(0);var UPPER='A'.charCodeAt(0);var PLUS_URL_SAFE='-'.charCodeAt(0);var SLASH_URL_SAFE='_'.charCodeAt(0);function decode(elt){var code=elt.charCodeAt(0);if(code===PLUS||code===PLUS_URL_SAFE)return 62;// '+'\nif(code===SLASH||code===SLASH_URL_SAFE)return 63;// '/'\nif(code<NUMBER)return-1;//no match\nif(code<NUMBER+10)return code-NUMBER+26+26;if(code<UPPER+26)return code-UPPER;if(code<LOWER+26)return code-LOWER+26;}function b64ToByteArray(b64){var i,j,l,tmp,placeHolders,arr;if(b64.length%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// the number of equal signs (place holders)\n// if there are two placeholders, than the two characters before it\n// represent one byte\n// if there is only one, then the three characters before it represent 2 bytes\n// this is just a cheap hack to not do indexOf twice\nvar len=b64.length;placeHolders='='===b64.charAt(len-2)?2:'='===b64.charAt(len-1)?1:0;// base64 is 4/3 + up to two characters of the original data\narr=new Arr(b64.length*3/4-placeHolders);// if there are placeholders, only get up to the last complete 4 chars\nl=placeHolders>0?b64.length-4:b64.length;var L=0;function push(v){arr[L++]=v;}for(i=0,j=0;i<l;i+=4,j+=3){tmp=decode(b64.charAt(i))<<18|decode(b64.charAt(i+1))<<12|decode(b64.charAt(i+2))<<6|decode(b64.charAt(i+3));push((tmp&0xFF0000)>>16);push((tmp&0xFF00)>>8);push(tmp&0xFF);}if(placeHolders===2){tmp=decode(b64.charAt(i))<<2|decode(b64.charAt(i+1))>>4;push(tmp&0xFF);}else if(placeHolders===1){tmp=decode(b64.charAt(i))<<10|decode(b64.charAt(i+1))<<4|decode(b64.charAt(i+2))>>2;push(tmp>>8&0xFF);push(tmp&0xFF);}return arr;}function uint8ToBase64(uint8){var i,extraBytes=uint8.length%3,// if we have 1 byte left, pad 2 bytes\noutput=\"\",temp,length;function encode(num){return lookup.charAt(num);}function tripletToBase64(num){return encode(num>>18&0x3F)+encode(num>>12&0x3F)+encode(num>>6&0x3F)+encode(num&0x3F);}// go through the array every three bytes, we'll deal with trailing stuff later\nfor(i=0,length=uint8.length-extraBytes;i<length;i+=3){temp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output+=tripletToBase64(temp);}// pad the end with zeros, but make sure to not forget the extra bytes\nswitch(extraBytes){case 1:temp=uint8[uint8.length-1];output+=encode(temp>>2);output+=encode(temp<<4&0x3F);output+='==';break;case 2:temp=(uint8[uint8.length-2]<<8)+uint8[uint8.length-1];output+=encode(temp>>10);output+=encode(temp>>4&0x3F);output+=encode(temp<<2&0x3F);output+='=';break;}return output;}exports.toByteArray=b64ToByteArray;exports.fromByteArray=uint8ToBase64;})(false?undefined:exports);/***/},/* 31 */ /***/function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};/***/},/* 32 */ /***/function(module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return toString.call(arr)=='[object Array]';};/***/},/* 33 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(arg){if(Array.isArray){return Array.isArray(arg);}return objectToString(arg)==='[object Array]';}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return _typeof(arg)==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return objectToString(e)==='[object Error]'||e instanceof Error;}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||_typeof(arg)==='symbol'||// ES6 symbol\ntypeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=Buffer.isBuffer;function objectToString(o){return Object.prototype.toString.call(o);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer);/***/},/* 34 */ /***/function(module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}/***/},/* 35 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar Buffer=__webpack_require__(29).Buffer;var isBufferEncoding=Buffer.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error('Unknown encoding: '+encoding);}}// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder=exports.StringDecoder=function(encoding){this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');assertEncoding(encoding);switch(this.encoding){case'utf8':// CESU-8 represents each of Surrogate Pair by 3-bytes\nthis.surrogateSize=3;break;case'ucs2':case'utf16le':// UTF-16 represents each of Surrogate Pair by 2-bytes\nthis.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case'base64':// Base-64 stores 3 bytes in 4 chars, and pads the remainder.\nthis.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return;}// Enough space to store all bytes of a single character. UTF-8 needs 4\n// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\nthis.charBuffer=new Buffer(6);// Number of bytes received for the current incomplete multi-byte character.\nthis.charReceived=0;// Number of bytes expected for the current incomplete multi-byte character.\nthis.charLength=0;};// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write=function(buffer){var charStr='';// if our last write ended with an incomplete multibyte character\nwhile(this.charLength){// determine how many remaining bytes this buffer has to offer for this char\nvar available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;// add the new bytes to the char buffer\nbuffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){// still not enough chars in this buffer? wait for more ...\nreturn'';}// remove bytes belonging to the current character from the buffer\nbuffer=buffer.slice(available,buffer.length);// get the character that was split\ncharStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\nvar charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=0xD800&&charCode<=0xDBFF){this.charLength+=this.surrogateSize;charStr='';continue;}this.charReceived=this.charLength=0;// if there are no more bytes in this buffer, just emit our char\nif(buffer.length===0){return charStr;}break;}// determine and set charLength / charReceived\nthis.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){// buffer the incomplete character bytes we got\nbuffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived;}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\nif(charCode>=0xD800&&charCode<=0xDBFF){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end);}// or just emit the charStr\nreturn charStr;};// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar=function(buffer){// determine how many bytes we have to check at the end of this buffer\nvar i=buffer.length>=3?3:buffer.length;// Figure out if one of the last i bytes of our buffer announces an\n// incomplete char.\nfor(;i>0;i--){var c=buffer[buffer.length-i];// See http://en.wikipedia.org/wiki/UTF-8#Description\n// 110XXXXX\nif(i==1&&c>>5==0x06){this.charLength=2;break;}// 1110XXXX\nif(i<=2&&c>>4==0x0E){this.charLength=3;break;}// 11110XXX\nif(i<=3&&c>>3==0x1E){this.charLength=4;break;}}this.charReceived=i;};StringDecoder.prototype.end=function(buffer){var res='';if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc);}return res;};function passThroughWrite(buffer){return buffer.toString(this.encoding);}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0;}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0;}/***/},/* 36 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\nmodule.exports=Writable;/*<replacement>*/var Buffer=__webpack_require__(29).Buffer;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/var Stream=__webpack_require__(6);util.inherits(Writable,Stream);function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;}function WritableState(options,stream){options=options||{};// the point at which write() starts returning false\n// Note: 0 is a valid value, means that we always return false if\n// the entire buffer is not flushed immediately on write()\nvar hwm=options.highWaterMark;this.highWaterMark=hwm||hwm===0?hwm:16*1024;// object stream flag to indicate whether or not this stream\n// contains buffers or objects.\nthis.objectMode=!!options.objectMode;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.needDrain=false;// at the start of calling end()\nthis.ending=false;// when end() has been called, and returned\nthis.ended=false;// when 'finish' is emitted\nthis.finished=false;// should we decode strings into buffers before passing to _write?\n// this is here so that some node-core streams can optimize string\n// handling at a lower level.\nvar noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement\n// of how much we're waiting to get pushed to some underlying\n// socket or file.\nthis.length=0;// a flag to see when we're in the middle of a write.\nthis.writing=false;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, becuase any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// a flag to know if we're processing previously buffered items, which\n// may call the _write() callback in the same tick, so that we don't\n// end up in an overlapped onwrite situation.\nthis.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)\nthis.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)\nthis.writecb=null;// the amount that is being written when _write is called.\nthis.writelen=0;this.buffer=[];// True if the error was already emitted and should not be thrown again\nthis.errorEmitted=false;}function Writable(options){var Duplex=__webpack_require__(37);// Writable ctor is applied to Duplexes, though they're not\n// instanceof Writable, they're instanceof Readable.\nif(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);// legacy.\nthis.writable=true;Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe. Not readable.'));};function writeAfterEnd(stream,state,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb\nstream.emit('error',er);process.nextTick(function(){cb(er);});}// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream,state,chunk,cb){var valid=true;if(!Buffer.isBuffer(chunk)&&'string'!==typeof chunk&&chunk!==null&&chunk!==undefined&&!state.objectMode){var er=new TypeError('Invalid non-string/buffer chunk');stream.emit('error',er);process.nextTick(function(){cb(er);});valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==='function'){cb=encoding;encoding=null;}if(Buffer.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=function cb(){};if(state.ended)writeAfterEnd(this,state,cb);else if(validChunk(this,state,chunk,cb))ret=writeOrBuffer(this,state,chunk,encoding,cb);return ret;};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=new Buffer(chunk,encoding);}return chunk;}// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.\nif(!ret)state.needDrain=true;if(state.writing)state.buffer.push(new WriteReq(chunk,encoding,cb));else doWrite(stream,state,len,chunk,encoding,cb);return ret;}function doWrite(stream,state,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){if(sync)process.nextTick(function(){cb(er);});else cb(er);stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet\nvar finished=needFinish(stream,state);if(!finished&&!state.bufferProcessing&&state.buffer.length)clearBuffer(stream,state);if(sync){process.nextTick(function(){afterWrite(stream,state,finished,cb);});}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);cb();if(finished)finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream,state){state.bufferProcessing=true;for(var c=0;c<state.buffer.length;c++){var entry=state.buffer[c];var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,len,chunk,encoding,cb);// if we didn't call the onwrite immediately, then\n// it means that we need to wait until it does.\n// also, that means that the chunk and cb are currently\n// being processed, so move the buffer counter past them.\nif(state.writing){c++;break;}}state.bufferProcessing=false;if(c<state.buffer.length)state.buffer=state.buffer.slice(c);else state.buffer.length=0;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('not implemented'));};Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(typeof chunk!=='undefined'&&chunk!==null)this.write(chunk,encoding);// ignore unnecessary end() calls.\nif(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(stream,state){return state.ending&&state.length===0&&!state.finished&&!state.writing;}function finishMaybe(stream,state){var need=needFinish(stream,state);if(need){state.finished=true;stream.emit('finish');}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)process.nextTick(cb);else stream.once('finish',cb);}state.ended=true;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 37 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\nmodule.exports=Duplex;/*<replacement>*/var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/ /*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/var Readable=__webpack_require__(27);var Writable=__webpack_require__(36);util.inherits(Duplex,Readable);forEach(objectKeys(Writable.prototype),function(method){if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];});function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer\nfunction onend(){// if we allow half-open state, or if the writable side ended,\n// then we're ok.\nif(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.\n// But allow more writes to happen in this tick.\nprocess.nextTick(this.end.bind(this));}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 38 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\nmodule.exports=Transform;var Duplex=__webpack_require__(37);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/util.inherits(Transform,Duplex);function TransformState(options,stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);if(cb)cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);var ts=this._transformState=new TransformState(options,this);// when the writable side finishes, then flush out anything remaining.\nvar stream=this;// start out asking for a readable event once data is transformed.\nthis._readableState.needReadable=true;// we have implemented the _read method, and done the other things\n// that Readable wants before the first _read call, so unset the\n// sync guard flag.\nthis._readableState.sync=false;this.once('finish',function(){if('function'===typeof this._flush)this._flush(function(er){done(stream,er);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform=function(chunk,encoding,cb){throw new Error('not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in\n// will get processed, now that we've asked for it.\nts.needTransform=true;}};function done(stream,er){if(er)return stream.emit('error',er);// if there's nothing in the write buffer, then that means\n// that nothing more will ever be provided\nvar ws=stream._writableState;var rs=stream._readableState;var ts=stream._transformState;if(ws.length)throw new Error('calling transform done when ws.length != 0');if(ts.transforming)throw new Error('calling transform done when still transforming');return stream.push(null);}/***/},/* 39 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\nmodule.exports=PassThrough;var Transform=__webpack_require__(38);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};/***/},/* 40 */ /***/function(module,exports,__webpack_require__){var once=__webpack_require__(41);var noop=function noop(){};var isRequest=function isRequest(stream){return stream.setHeader&&typeof stream.abort==='function';};var isChildProcess=function isChildProcess(stream){return stream.stdio&&Array.isArray(stream.stdio)&&stream.stdio.length===3;};var eos=function eos(stream,opts,callback){if(typeof opts==='function')return eos(stream,null,opts);if(!opts)opts={};callback=once(callback||noop);var ws=stream._writableState;var rs=stream._readableState;var readable=opts.readable||opts.readable!==false&&stream.readable;var writable=opts.writable||opts.writable!==false&&stream.writable;var onlegacyfinish=function onlegacyfinish(){if(!stream.writable)onfinish();};var onfinish=function onfinish(){writable=false;if(!readable)callback();};var onend=function onend(){readable=false;if(!writable)callback();};var onexit=function onexit(exitCode){callback(exitCode?new Error('exited with error code: '+exitCode):null);};var onclose=function onclose(){if(readable&&!(rs&&rs.ended))return callback(new Error('premature close'));if(writable&&!(ws&&ws.ended))return callback(new Error('premature close'));};var onrequest=function onrequest(){stream.req.on('finish',onfinish);};if(isRequest(stream)){stream.on('complete',onfinish);stream.on('abort',onclose);if(stream.req)onrequest();else stream.on('request',onrequest);}else if(writable&&!ws){// legacy streams\nstream.on('end',onlegacyfinish);stream.on('close',onlegacyfinish);}if(isChildProcess(stream))stream.on('exit',onexit);stream.on('end',onend);stream.on('finish',onfinish);if(opts.error!==false)stream.on('error',callback);stream.on('close',onclose);return function(){stream.removeListener('complete',onfinish);stream.removeListener('abort',onclose);stream.removeListener('request',onrequest);if(stream.req)stream.req.removeListener('finish',onfinish);stream.removeListener('end',onlegacyfinish);stream.removeListener('close',onlegacyfinish);stream.removeListener('finish',onfinish);stream.removeListener('exit',onexit);stream.removeListener('end',onend);stream.removeListener('error',callback);stream.removeListener('close',onclose);};};module.exports=eos;/***/},/* 41 */ /***/function(module,exports,__webpack_require__){var wrappy=__webpack_require__(42);module.exports=wrappy(once);once.proto=once(function(){Object.defineProperty(Function.prototype,'once',{value:function value(){return once(this);},configurable:true});});function once(fn){var f=function f(){if(f.called)return f.value;f.called=true;return f.value=fn.apply(this,arguments);};f.called=false;return f;}/***/},/* 42 */ /***/function(module,exports){// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports=wrappy;function wrappy(fn,cb){if(fn&&cb)return wrappy(fn)(cb);if(typeof fn!=='function')throw new TypeError('need wrapper function');Object.keys(fn).forEach(function(k){wrapper[k]=fn[k];});return wrapper;function wrapper(){var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}var ret=fn.apply(this,args);var cb=args[args.length-1];if(typeof ret==='function'&&ret!==cb){Object.keys(cb).forEach(function(k){ret[k]=cb[k];});}return ret;}}/***/},/* 43 */ /***/function(module,exports,__webpack_require__){'use strict';exports.parser=__webpack_require__(44);exports.generate=__webpack_require__(52);/***/},/* 44 */ /***/function(module,exports,__webpack_require__){var bl=__webpack_require__(45),inherits=__webpack_require__(34),EE=__webpack_require__(3).EventEmitter,Packet=__webpack_require__(50),constants=__webpack_require__(51);function Parser(){if(!(this instanceof Parser)){return new Parser();}this._list=bl();this._newPacket();this._states=['_parseHeader','_parseLength','_parsePayload','_newPacket'];this._stateCounter=0;}inherits(Parser,EE);Parser.prototype._newPacket=function(){if(this.packet){this._list.consume(this.packet.length);this.emit('packet',this.packet);}this.packet=new Packet();return true;};Parser.prototype.parse=function(buf){this._list.append(buf);while((this.packet.length!=-1||this._list.length>0)&&this[this._states[this._stateCounter]]()){this._stateCounter++;if(this._stateCounter>=this._states.length){this._stateCounter=0;}}return this._list.length;};Parser.prototype._parseHeader=function(){// there is at least one byte in the buffer\nvar zero=this._list.readUInt8(0);this.packet.cmd=constants.types[zero>>constants.CMD_SHIFT];this.packet.retain=(zero&constants.RETAIN_MASK)!==0;this.packet.qos=zero>>constants.QOS_SHIFT&constants.QOS_MASK;this.packet.dup=(zero&constants.DUP_MASK)!==0;this._list.consume(1);return true;};Parser.prototype._parseLength=function(){// there is at least one byte in the list\nvar bytes=0,mul=1,length=0,result=true,current;while(bytes<5){current=this._list.readUInt8(bytes++);length+=mul*(current&constants.LENGTH_MASK);mul*=0x80;if((current&constants.LENGTH_FIN_MASK)===0){break;}if(this._list.length<=bytes){result=false;break;}}if(result){this.packet.length=length;this._list.consume(bytes);}return result;};Parser.prototype._parsePayload=function(){var result=false;// Do we have a payload? Do we have enough data to complete the payload?\n// PINGs have no payload\nif(this.packet.length===0||this._list.length>=this.packet.length){this._pos=0;switch(this.packet.cmd){case'connect':this._parseConnect();break;case'connack':this._parseConnack();break;case'publish':this._parsePublish();break;case'puback':case'pubrec':case'pubrel':case'pubcomp':this._parseMessageId();break;case'subscribe':this._parseSubscribe();break;case'suback':this._parseSuback();break;case'unsubscribe':this._parseUnsubscribe();break;case'unsuback':this._parseUnsuback();break;case'pingreq':case'pingresp':case'disconnect':// these are empty, nothing to do\nbreak;default:this.emit('error',new Error('not supported'));}result=true;}return result;};Parser.prototype._parseConnect=function(){var protocolId// constants id\n,clientId// Client id\n,topic// Will topic\n,payload// Will payload\n,password// Password\n,username// Username\n,flags={},packet=this.packet;// Parse constants id\nprotocolId=this._parseString();if(protocolId===null)return this.emit('error',new Error('cannot parse protocol id'));if(protocolId!='MQTT'&&protocolId!='MQIsdp'){return this.emit('error',new Error('invalid protocol id'));}packet.protocolId=protocolId;// Parse constants version number\nif(this._pos>=this._list.length)return this.emit('error',new Error('packet too short'));packet.protocolVersion=this._list.readUInt8(this._pos);if(packet.protocolVersion!=3&&packet.protocolVersion!=4){return this.emit('error',new Error('invalid protocol version'));}this._pos++;if(this._pos>=this._list.length)return this.emit('error',new Error('packet too short'));// Parse connect flags\nflags.username=this._list.readUInt8(this._pos)&constants.USERNAME_MASK;flags.password=this._list.readUInt8(this._pos)&constants.PASSWORD_MASK;flags.will=this._list.readUInt8(this._pos)&constants.WILL_FLAG_MASK;if(flags.will){packet.will={};packet.will.retain=(this._list.readUInt8(this._pos)&constants.WILL_RETAIN_MASK)!==0;packet.will.qos=(this._list.readUInt8(this._pos)&constants.WILL_QOS_MASK)>>constants.WILL_QOS_SHIFT;}packet.clean=(this._list.readUInt8(this._pos)&constants.CLEAN_SESSION_MASK)!==0;this._pos++;// Parse keepalive\npacket.keepalive=this._parseNum();if(packet.keepalive===-1)return this.emit('error',new Error('packet too short'));// Parse client ID\nclientId=this._parseString();if(clientId===null)return this.emit('error',new Error('packet too short'));packet.clientId=clientId;if(flags.will){// Parse will topic\ntopic=this._parseString();if(topic===null)return this.emit('error',new Error('cannot parse will topic'));packet.will.topic=topic;// Parse will payload\npayload=this._parseBuffer();if(payload===null)return this.emit('error',new Error('cannot parse will payload'));packet.will.payload=payload;}// Parse username\nif(flags.username){username=this._parseString();if(username===null)return this.emit('error',new Error('cannot parse username'));packet.username=username;}// Parse password\nif(flags.password){password=this._parseBuffer();if(password===null)return this.emit('error',new Error('cannot parse username'));packet.password=password;}return packet;};Parser.prototype._parseConnack=function(){var packet=this.packet;if(this._list.length<2)return null;packet.sessionPresent=!!(this._list.readUInt8(this._pos++)&constants.SESSIONPRESENT_MASK);packet.returnCode=this._list.readUInt8(this._pos);if(packet.returnCode===-1)return this.emit('error',new Error('cannot parse return code'));};Parser.prototype._parsePublish=function(){var packet=this.packet;packet.topic=this._parseString();if(packet.topic===null)return this.emit('error',new Error('cannot parse topic'));// Parse message ID\nif(packet.qos>0){if(!this._parseMessageId()){return;}}packet.payload=this._list.slice(this._pos,packet.length);};Parser.prototype._parseSubscribe=function(){var packet=this.packet,topic,qos;if(packet.qos!=1){return this.emit('error',new Error('wrong subscribe header'));}packet.subscriptions=[];if(!this._parseMessageId()){return;}while(this._pos<packet.length){// Parse topic\ntopic=this._parseString();if(topic===null)return this.emit('error',new Error('Parse error - cannot parse topic'));qos=this._list.readUInt8(this._pos++);// Push pair to subscriptions\npacket.subscriptions.push({topic:topic,qos:qos});}};Parser.prototype._parseSuback=function(){this.packet.granted=[];if(!this._parseMessageId()){return;}// Parse granted QoSes\nwhile(this._pos<this.packet.length){this.packet.granted.push(this._list.readUInt8(this._pos++));}};Parser.prototype._parseUnsubscribe=function(){var packet=this.packet;packet.unsubscriptions=[];// Parse message ID\nif(!this._parseMessageId()){return;}while(this._pos<packet.length){var topic;// Parse topic\ntopic=this._parseString();if(topic===null)return this.emit('error',new Error('cannot parse topic'));// Push topic to unsubscriptions\npacket.unsubscriptions.push(topic);}};Parser.prototype._parseUnsuback=function(){if(!this._parseMessageId())return this.emit('error',new Error('cannot parse message id'));};Parser.prototype._parseMessageId=function(){var packet=this.packet;packet.messageId=this._parseNum();if(packet.messageId===null){this.emit('error',new Error('cannot parse message id'));return false;}return true;};Parser.prototype._parseString=function(maybeBuffer){var length=this._parseNum(),result,end=length+this._pos;if(length===-1||end>this._list.length||end>this.packet.length)return null;result=this._list.toString('utf8',this._pos,end);this._pos+=length;return result;};Parser.prototype._parseBuffer=function(){var length=this._parseNum(),result,end=length+this._pos;if(length===-1||end>this._list.length||end>this.packet.length)return null;result=this._list.slice(this._pos,end);this._pos+=length;return result;};Parser.prototype._parseNum=function(){if(this._list.length-this._pos<2)return-1;var result=this._list.readUInt16BE(this._pos);this._pos+=2;return result;};module.exports=Parser;/***/},/* 45 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var DuplexStream=__webpack_require__(46),util=__webpack_require__(47);function BufferList(callback){if(!(this instanceof BufferList))return new BufferList(callback);this._bufs=[];this.length=0;if(typeof callback=='function'){this._callback=callback;var piper=function(err){if(this._callback){this._callback(err);this._callback=null;}}.bind(this);this.on('pipe',function(src){src.on('error',piper);});this.on('unpipe',function(src){src.removeListener('error',piper);});}else if(Buffer.isBuffer(callback))this.append(callback);else if(Array.isArray(callback)){callback.forEach(function(b){Buffer.isBuffer(b)&&this.append(b);}.bind(this));}DuplexStream.call(this);}util.inherits(BufferList,DuplexStream);BufferList.prototype._offset=function(offset){var tot=0,i=0,_t;for(;i<this._bufs.length;i++){_t=tot+this._bufs[i].length;if(offset<_t)return[i,offset-tot];tot=_t;}};BufferList.prototype.append=function(buf){var isBuffer=Buffer.isBuffer(buf)||buf instanceof BufferList;// coerce number arguments to strings, since Buffer(number) does\n// uninitialized memory allocation\nif(typeof buf=='number')buf=buf.toString();this._bufs.push(isBuffer?buf:new Buffer(buf));this.length+=buf.length;return this;};BufferList.prototype._write=function(buf,encoding,callback){this.append(buf);if(callback)callback();};BufferList.prototype._read=function(size){if(!this.length)return this.push(null);size=Math.min(size,this.length);this.push(this.slice(0,size));this.consume(size);};BufferList.prototype.end=function(chunk){DuplexStream.prototype.end.call(this,chunk);if(this._callback){this._callback(null,this.slice());this._callback=null;}};BufferList.prototype.get=function(index){return this.slice(index,index+1)[0];};BufferList.prototype.slice=function(start,end){return this.copy(null,0,start,end);};BufferList.prototype.copy=function(dst,dstStart,srcStart,srcEnd){if(typeof srcStart!='number'||srcStart<0)srcStart=0;if(typeof srcEnd!='number'||srcEnd>this.length)srcEnd=this.length;if(srcStart>=this.length)return dst||new Buffer(0);if(srcEnd<=0)return dst||new Buffer(0);var copy=!!dst,off=this._offset(srcStart),len=srcEnd-srcStart,bytes=len,bufoff=copy&&dstStart||0,start=off[1],l,i;// copy/slice everything\nif(srcStart===0&&srcEnd==this.length){if(!copy)// slice, just return a full concat\nreturn Buffer.concat(this._bufs);// copy, need to copy individual buffers\nfor(i=0;i<this._bufs.length;i++){this._bufs[i].copy(dst,bufoff);bufoff+=this._bufs[i].length;}return dst;}// easy, cheap case where it's a subset of one of the buffers\nif(bytes<=this._bufs[off[0]].length-start){return copy?this._bufs[off[0]].copy(dst,dstStart,start,start+bytes):this._bufs[off[0]].slice(start,start+bytes);}if(!copy)// a slice, we need something to copy in to\ndst=new Buffer(len);for(i=off[0];i<this._bufs.length;i++){l=this._bufs[i].length-start;if(bytes>l){this._bufs[i].copy(dst,bufoff,start);}else{this._bufs[i].copy(dst,bufoff,start,start+bytes);break;}bufoff+=l;bytes-=l;if(start)start=0;}return dst;};BufferList.prototype.toString=function(encoding,start,end){return this.slice(start,end).toString(encoding);};BufferList.prototype.consume=function(bytes){while(this._bufs.length){if(bytes>this._bufs[0].length){bytes-=this._bufs[0].length;this.length-=this._bufs[0].length;this._bufs.shift();}else{this._bufs[0]=this._bufs[0].slice(bytes);this.length-=bytes;break;}}return this;};BufferList.prototype.duplicate=function(){var i=0,copy=new BufferList();for(;i<this._bufs.length;i++){copy.append(this._bufs[i]);}return copy;};BufferList.prototype.destroy=function(){this._bufs.length=0;this.length=0;this.push(null);};(function(){var methods={'readDoubleBE':8,'readDoubleLE':8,'readFloatBE':4,'readFloatLE':4,'readInt32BE':4,'readInt32LE':4,'readUInt32BE':4,'readUInt32LE':4,'readInt16BE':2,'readInt16LE':2,'readUInt16BE':2,'readUInt16LE':2,'readInt8':1,'readUInt8':1};for(var m in methods){(function(m){BufferList.prototype[m]=function(offset){return this.slice(offset,offset+methods[m])[m](0);};})(m);}})();module.exports=BufferList;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer);/***/},/* 46 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(37);/***/},/* 47 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,process){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate=function(fn,msg){// Allow for deprecating things in the process of starting up.\nif(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\\\b'+set+'\\\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */ /* legacy: obj, showHidden, depth, colors*/function inspect(obj,opts){// default options\nvar ctx={seen:[],stylize:stylizeNoColor};// legacy...\nif(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){// legacy...\nctx.showHidden=opts;}else if(opts){// got an \"options\" object\nexports._extend(ctx,opts);}// set default options\nif(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe\ninspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// \"name\": intentionally not styling\n'regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return\"\\x1B[\"+inspect.colors[style][0]+'m'+str+\"\\x1B[\"+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.\n// Check that value is an object with an inspect function on it\nif(ctx.customInspect&&value&&isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special\nvalue.inspect!==exports.inspect&&// Also filter out any prototype objects using the circular check.\n!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties\nvar primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.\nvar keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable\n// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\nif(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}// Some type of object without properties can be shortcutted.\nif(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array\nif(isArray(value)){array=true;braces=['[',']'];}// Make functions say that they are functions\nif(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps\nif(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date\nif(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error\nif(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\\''+JSON.stringify(value).replace(/^\"|\"$/g,'').replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+'\\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is \"object\", so special case here.\nif(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\\n')>-1){if(array){str=str.split('\\n').map(function(line){return'  '+line;}).join('\\n').substr(2);}else{str='\\n'+str.split('\\n').map(function(line){return'   '+line;}).join('\\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\\n')>=0)numLinesEst++;return prev+cur.replace(/\\u001b\\[\\d\\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\\n ')+' '+output.join(',\\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return _typeof(arg)==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||_typeof(arg)==='symbol'||// ES6 symbol\ntypeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=__webpack_require__(48);function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<10?'0'+n.toString(10):n.toString(10);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];// 26 Feb 16:19:34\nfunction timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return[d.getDate(),months[d.getMonth()],time].join(' ');}// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */exports.inherits=__webpack_require__(49);exports._extend=function(origin,add){// Don't do anything if add isn't an object\nif(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}(),__webpack_require__(1));/***/},/* 48 */ /***/function(module,exports){module.exports=function isBuffer(arg){return arg&&_typeof(arg)==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';};/***/},/* 49 */ /***/function(module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}/***/},/* 50 */ /***/function(module,exports){function Packet(){this.cmd=null;this.retain=false;this.qos=0;this.dup=false;this.length=-1;this.topic=null;this.payload=null;}module.exports=Packet;/***/},/* 51 */ /***/function(module,exports){/* Protocol - protocol constants */ /* Command code => mnemonic */module.exports.types={0:'reserved',1:'connect',2:'connack',3:'publish',4:'puback',5:'pubrec',6:'pubrel',7:'pubcomp',8:'subscribe',9:'suback',10:'unsubscribe',11:'unsuback',12:'pingreq',13:'pingresp',14:'disconnect',15:'reserved'};/* Mnemonic => Command code */module.exports.codes={};for(var k in module.exports.types){var v=module.exports.types[k];module.exports.codes[v]=k;}/* Header */module.exports.CMD_SHIFT=4;module.exports.CMD_MASK=0xF0;module.exports.DUP_MASK=0x08;module.exports.QOS_MASK=0x03;module.exports.QOS_SHIFT=1;module.exports.RETAIN_MASK=0x01;/* Length */module.exports.LENGTH_MASK=0x7F;module.exports.LENGTH_FIN_MASK=0x80;/* Connack */module.exports.SESSIONPRESENT_MASK=0x01;/* Connect */module.exports.USERNAME_MASK=0x80;module.exports.PASSWORD_MASK=0x40;module.exports.WILL_RETAIN_MASK=0x20;module.exports.WILL_QOS_MASK=0x18;module.exports.WILL_QOS_SHIFT=3;module.exports.WILL_FLAG_MASK=0x04;module.exports.CLEAN_SESSION_MASK=0x02;/***/},/* 52 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){'use strict';var protocol=__webpack_require__(51),empty=new Buffer(0);function generate(packet){switch(packet.cmd){case'connect':return connect(packet);case'connack':return connack(packet);case'publish':return publish(packet);case'puback':case'pubrec':case'pubrel':case'pubcomp':case'unsuback':return confirmation(packet);case'subscribe':return subscribe(packet);case'suback':return suback(packet);case'unsubscribe':return unsubscribe(packet);case'pingreq':case'pingresp':case'disconnect':return emptyPacket(packet);default:throw new Error('unknown command');}}function connect(opts){var opts=opts||{},protocolId=opts.protocolId||'MQTT',protocolVersion=opts.protocolVersion||4,will=opts.will,clean=opts.clean,keepalive=opts.keepalive||0,clientId=opts.clientId||\"\",username=opts.username,password=opts.password;if(clean===undefined){clean=true;}var length=0;// Must be a string and non-falsy\nif(!protocolId||typeof protocolId!==\"string\"&&!Buffer.isBuffer(protocolId)){throw new Error('Invalid protocol id');}else{length+=protocolId.length+2;}// Must be a 1 byte number\nif(!protocolVersion||'number'!==typeof protocolVersion||protocolVersion>255||protocolVersion<0){throw new Error('Invalid protocol version');}else{length+=1;}// ClientId might be omitted in 3.1.1, but only if cleanSession is set to 1\nif((typeof clientId===\"string\"||Buffer.isBuffer(clientId))&&(clientId||protocolVersion==4)&&(clientId||clean)){length+=clientId.length+2;}else{if(protocolVersion<4){throw new Error('clientId must be supplied before 3.1.1');}if(clean==0){throw new Error('clientId must be given if cleanSession set to 0');}}// Must be a two byte number\nif('number'!==typeof keepalive||keepalive<0||keepalive>65535){throw new Error('Invalid keepalive');}else{length+=2;}// Connect flags\nlength+=1;// If will exists...\nif(will){// It must be an object\nif('object'!==_typeof(will)){throw new Error('Invalid will');}// It must have topic typeof string\nif(!will.topic||'string'!==typeof will.topic){throw new Error('Invalid will topic');}else{length+=Buffer.byteLength(will.topic)+2;}// Payload\nif(will.payload&&will.payload){if(will.payload.length>=0){if('string'===typeof will.payload){length+=Buffer.byteLength(will.payload)+2;}else{length+=will.payload.length+2;}}else{throw new Error('Invalid will payload');}}else{length+=2;}}// Username\nif(username){if(username.length){length+=Buffer.byteLength(username)+2;}else{throw new Error('Invalid username');}}// Password\nif(password){if(password.length){length+=byteLength(password)+2;}else{throw new Error('Invalid password');}}var buffer=new Buffer(1+calcLengthLength(length)+length),pos=0;// Generate header\nbuffer.writeUInt8(protocol.codes['connect']<<protocol.CMD_SHIFT,pos++,true);// Generate length\npos+=writeLength(buffer,pos,length);// Generate protocol ID\npos+=writeStringOrBuffer(buffer,pos,protocolId);buffer.writeUInt8(protocolVersion,pos++,true);// Connect flags\nvar flags=0;flags|=username?protocol.USERNAME_MASK:0;flags|=password?protocol.PASSWORD_MASK:0;flags|=will&&will.retain?protocol.WILL_RETAIN_MASK:0;flags|=will&&will.qos?will.qos<<protocol.WILL_QOS_SHIFT:0;flags|=will?protocol.WILL_FLAG_MASK:0;flags|=clean?protocol.CLEAN_SESSION_MASK:0;buffer.writeUInt8(flags,pos++,true);// Keepalive\npos+=writeNumber(buffer,pos,keepalive);// Client ID\npos+=writeStringOrBuffer(buffer,pos,clientId);// Will\nif(will){pos+=writeString(buffer,pos,will.topic);pos+=writeStringOrBuffer(buffer,pos,will.payload);}// Username and password\nif(username)pos+=writeStringOrBuffer(buffer,pos,username);if(password)pos+=writeStringOrBuffer(buffer,pos,password);return buffer;}function connack(opts){var opts=opts||{},rc=opts.returnCode;// Check return code\nif('number'!==typeof rc)throw new Error('Invalid return code');var buffer=new Buffer(4),pos=0;buffer.writeUInt8(protocol.codes['connack']<<protocol.CMD_SHIFT,pos++,true);pos+=writeLength(buffer,pos,2);buffer.writeUInt8(opts.sessionPresent&&protocol.SESSIONPRESENT_MASK||0,pos++,true);buffer.writeUInt8(rc,pos++,true);return buffer;}function publish(opts){var opts=opts||{},dup=opts.dup?protocol.DUP_MASK:0,qos=opts.qos,retain=opts.retain?protocol.RETAIN_MASK:0,topic=opts.topic,payload=opts.payload||empty,id=opts.messageId;var length=0;// Topic must be a non-empty string or Buffer\nif(typeof topic===\"string\")length+=Buffer.byteLength(topic)+2;else if(Buffer.isBuffer(topic))length+=topic.length+2;else throw new Error('Invalid topic');// get the payload length\nif(!Buffer.isBuffer(payload)){length+=Buffer.byteLength(payload);}else{length+=payload.length;}// Message id must a number if qos > 0\nif(qos&&'number'!==typeof id){throw new Error('Invalid message id');}else if(qos){length+=2;}var buffer=new Buffer(1+calcLengthLength(length)+length),pos=0;// Header\nbuffer.writeUInt8(protocol.codes['publish']<<protocol.CMD_SHIFT|dup|qos<<protocol.QOS_SHIFT|retain,pos++,true);// Remaining length\npos+=writeLength(buffer,pos,length);// Topic\npos+=writeStringOrBuffer(buffer,pos,topic);// Message ID\nif(qos>0){pos+=writeNumber(buffer,pos,id);}// Payload\nif(!Buffer.isBuffer(payload)){writeStringNoPos(buffer,pos,payload);}else{writeBuffer(buffer,pos,payload);}return buffer;}/* Puback, pubrec, pubrel and pubcomp */function confirmation(opts){var opts=opts||{},type=opts.cmd||'puback',id=opts.messageId,dup=opts.dup&&type==='pubrel'?protocol.DUP_MASK:0,qos=0;if(type==='pubrel')qos=1;// Check message ID\nif('number'!==typeof id)throw new Error('Invalid message id');var buffer=new Buffer(4),pos=0;// Header\nbuffer[pos++]=protocol.codes[type]<<protocol.CMD_SHIFT|dup|qos<<protocol.QOS_SHIFT;// Length\npos+=writeLength(buffer,pos,2);// Message ID\npos+=writeNumber(buffer,pos,id);return buffer;}function subscribe(opts){var opts=opts||{},dup=opts.dup?protocol.DUP_MASK:0,qos=opts.qos||0,id=opts.messageId,subs=opts.subscriptions;var length=0;// Check mid\nif('number'!==typeof id){throw new Error('Invalid message id');}else{length+=2;}// Check subscriptions\nif('object'===_typeof(subs)&&subs.length){for(var i=0;i<subs.length;i+=1){var topic=subs[i].topic,qos=subs[i].qos;if('string'!==typeof topic){throw new Error('Invalid subscriptions - invalid topic');}if('number'!==typeof qos){throw new Error('Invalid subscriptions - invalid qos');}length+=Buffer.byteLength(topic)+2+1;}}else{throw new Error('Invalid subscriptions');}var buffer=new Buffer(1+calcLengthLength(length)+length),pos=0;// Generate header\nbuffer.writeUInt8(protocol.codes['subscribe']<<protocol.CMD_SHIFT|dup|1<<protocol.QOS_SHIFT,pos++,true);// Generate length\npos+=writeLength(buffer,pos,length);// Generate message ID\npos+=writeNumber(buffer,pos,id);// Generate subs\nfor(var i=0;i<subs.length;i++){var sub=subs[i],topic=sub.topic,qos=sub.qos;// Write topic string\npos+=writeString(buffer,pos,topic);// Write qos\nbuffer.writeUInt8(qos,pos++,true);}return buffer;}function suback(opts){var opts=opts||{},id=opts.messageId,granted=opts.granted;var length=0;// Check message id\nif('number'!==typeof id){throw new Error('Invalid message id');}else{length+=2;}// Check granted qos vector\nif('object'===_typeof(granted)&&granted.length){for(var i=0;i<granted.length;i+=1){if('number'!==typeof granted[i]){throw new Error('Invalid qos vector');}length+=1;}}else{throw new Error('Invalid qos vector');}var buffer=new Buffer(1+calcLengthLength(length)+length),pos=0;// Header\nbuffer.writeUInt8(protocol.codes['suback']<<protocol.CMD_SHIFT,pos++,true);// Length\npos+=writeLength(buffer,pos,length);// Message ID\npos+=writeNumber(buffer,pos,id);// Subscriptions\nfor(var i=0;i<granted.length;i++){buffer.writeUInt8(granted[i],pos++,true);}return buffer;}function unsubscribe(opts){var opts=opts||{},id=opts.messageId,dup=opts.dup?protocol.DUP_MASK:0,unsubs=opts.unsubscriptions;var length=0;// Check message id\nif('number'!==typeof id){throw new Error('Invalid message id');}else{length+=2;}// Check unsubs\nif('object'===_typeof(unsubs)&&unsubs.length){for(var i=0;i<unsubs.length;i+=1){if('string'!==typeof unsubs[i]){throw new Error('Invalid unsubscriptions');}length+=Buffer.byteLength(unsubs[i])+2;}}else{throw new Error('Invalid unsubscriptions');}var buffer=new Buffer(1+calcLengthLength(length)+length),pos=0;// Header\nbuffer[pos++]=protocol.codes['unsubscribe']<<protocol.CMD_SHIFT|dup|1<<protocol.QOS_SHIFT;// Length\npos+=writeLength(buffer,pos,length);// Message ID\npos+=writeNumber(buffer,pos,id);// Unsubs\nfor(var i=0;i<unsubs.length;i++){pos+=writeString(buffer,pos,unsubs[i]);}return buffer;}function emptyPacket(opts){var buf=new Buffer(2);buf[0]=protocol.codes[opts.cmd]<<4;buf[1]=0;return buf;}/**\n\t * calcLengthLength - calculate the length of the remaining\n\t * length field\n\t *\n\t * @api private\n\t */function calcLengthLength(length){if(length>=0&&length<128){return 1;}else if(length>=128&&length<16384){return 2;}else if(length>=16384&&length<2097152){return 3;}else if(length>=2097152&&length<268435456){return 4;}else{return 0;}}/**\n\t * writeLength - write an MQTT style length field to the buffer\n\t *\n\t * @param <Buffer> buffer - destination\n\t * @param <Number> pos - offset\n\t * @param <Number> length - length (>0)\n\t * @returns <Number> number of bytes written\n\t *\n\t * @api private\n\t */function writeLength(buffer,pos,length){var digit=0,origPos=pos;do{digit=length%128|0;length=length/128|0;if(length>0){digit=digit|0x80;}buffer.writeUInt8(digit,pos++,true);}while(length>0);return pos-origPos;}/**\n\t * writeString - write a utf8 string to the buffer\n\t *\n\t * @param <Buffer> buffer - destination\n\t * @param <Number> pos - offset\n\t * @param <String> string - string to write\n\t * @return <Number> number of bytes written\n\t *\n\t * @api private\n\t */function writeString(buffer,pos,string){var strlen=Buffer.byteLength(string);writeNumber(buffer,pos,strlen);writeStringNoPos(buffer,pos+2,string);return strlen+2;}function writeStringNoPos(buffer,pos,string){buffer.write(string,pos);}/**\n\t * write_buffer - write buffer to buffer\n\t *\n\t * @param <Buffer> buffer - dest buffer\n\t * @param <Number> pos - offset\n\t * @param <Buffer> src - source buffer\n\t * @return <Number> number of bytes written\n\t *\n\t * @api private\n\t */function writeBuffer(buffer,pos,src){src.copy(buffer,pos);return src.length;}/**\n\t * writeNumber - write a two byte number to the buffer\n\t *\n\t * @param <Buffer> buffer - destination\n\t * @param <Number> pos - offset\n\t * @param <String> number - number to write\n\t * @return <Number> number of bytes written\n\t *\n\t * @api private\n\t */function writeNumber(buffer,pos,number){buffer.writeUInt8(number>>8,pos,true);buffer.writeUInt8(number&0x00FF,pos+1,true);return 2;}/**\n\t * writeStringOrBuffer - write a String or Buffer with the its length prefix\n\t *\n\t * @param <Buffer> buffer - destination\n\t * @param <Number> pos - offset\n\t * @param <String> toWrite - String or Buffer\n\t * @return <Number> number of bytes written\n\t */function writeStringOrBuffer(buffer,pos,toWrite){var written=0;if(toWrite&&typeof toWrite==='string'){written+=writeString(buffer,pos+written,toWrite);}else if(toWrite){written+=writeNumber(buffer,pos+written,toWrite.length);written+=writeBuffer(buffer,pos+written,toWrite);}else{written+=writeNumber(buffer,pos+written,0);}return written;}function byteLength(bufOrString){if(Buffer.isBuffer(bufOrString)){return bufOrString.length;}else{return Buffer.byteLength(bufOrString);}}module.exports=generate;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer);/***/},/* 53 */ /***/function(module,exports){'use strict';function ReInterval(callback,interval,args){var self=this;this._callback=callback;this._args=args;this._interval=setInterval(callback,interval,this._args);this.reschedule=function(interval){// if no interval entered, use the interval passed in on creation\nif(!interval)interval=self._interval;if(self._interval)clearInterval(self._interval);self._interval=setInterval(self._callback,interval,self._args);};this.clear=function(){if(self._interval){clearInterval(self._interval);self._interval=undefined;}};this.destroy=function(){if(self._interval){clearInterval(self._interval);}self._callback=undefined;self._interval=undefined;self._args=undefined;};}function reInterval(){if(typeof arguments[0]!=='function')throw new Error('callback needed');if(typeof arguments[1]!=='number')throw new Error('interval needed');var args;if(arguments.length>0){args=new Array(arguments.length-2);for(var i=0;i<args.length;i++){args[i]=arguments[i+2];}}return new ReInterval(arguments[0],arguments[1],args);}module.exports=reInterval;/***/},/* 54 */ /***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar punycode=__webpack_require__(55);exports.parse=urlParse;exports.resolve=urlResolve;exports.resolveObject=urlResolveObject;exports.format=urlFormat;exports.Url=Url;function Url(){this.protocol=null;this.slashes=null;this.auth=null;this.host=null;this.port=null;this.hostname=null;this.hash=null;this.search=null;this.query=null;this.pathname=null;this.path=null;this.href=null;}// Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims=['<','>','\"','`',' ','\\r','\\n','\\t'],// RFC 2396: characters not allowed for various reasons.\nunwise=['{','}','|','\\\\','^','`'].concat(delims),// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape=['\\''].concat(unwise),// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars=['%','/','?',';','#'].concat(autoEscape),hostEndingChars=['/','?','#'],hostnameMaxLen=255,hostnamePartPattern=/^[a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([a-z0-9A-Z_-]{0,63})(.*)$/,// protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol={'javascript':true,'javascript:':true},// protocols that never have a hostname.\nhostlessProtocol={'javascript':true,'javascript:':true},// protocols that always contain a // bit.\nslashedProtocol={'http':true,'https':true,'ftp':true,'gopher':true,'file':true,'http:':true,'https:':true,'ftp:':true,'gopher:':true,'file:':true},querystring=__webpack_require__(57);function urlParse(url,parseQueryString,slashesDenoteHost){if(url&&isObject(url)&&url instanceof Url)return url;var u=new Url();u.parse(url,parseQueryString,slashesDenoteHost);return u;}Url.prototype.parse=function(url,parseQueryString,slashesDenoteHost){if(!isString(url)){throw new TypeError(\"Parameter 'url' must be a string, not \"+_typeof(url));}var rest=url;// trim before proceeding.\n// This is to support parse stuff like \"  http://foo.com  \\n\"\nrest=rest.trim();var proto=protocolPattern.exec(rest);if(proto){proto=proto[0];var lowerProto=proto.toLowerCase();this.protocol=lowerProto;rest=rest.substr(proto.length);}// figure out if it's got a host\n// user@server is *always* interpreted as a hostname, and url\n// resolution will treat //foo/bar as host=foo,path=bar because that's\n// how the browser resolves relative URLs.\nif(slashesDenoteHost||proto||rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)){var slashes=rest.substr(0,2)==='//';if(slashes&&!(proto&&hostlessProtocol[proto])){rest=rest.substr(2);this.slashes=true;}}if(!hostlessProtocol[proto]&&(slashes||proto&&!slashedProtocol[proto])){// there's a hostname.\n// the first instance of /, ?, ;, or # ends the host.\n//\n// If there is an @ in the hostname, then non-host chars *are* allowed\n// to the left of the last @ sign, unless some host-ending character\n// comes *before* the @-sign.\n// URLs are obnoxious.\n//\n// ex:\n// http://a@b@c/ => user:a@b host:c\n// http://a@b?@c => user:a host:c path:/?@c\n// v0.12 TODO(isaacs): This is not quite how Chrome does things.\n// Review our test case against browsers more comprehensively.\n// find the first instance of any hostEndingChars\nvar hostEnd=-1;for(var i=0;i<hostEndingChars.length;i++){var hec=rest.indexOf(hostEndingChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// at this point, either we have an explicit point where the\n// auth portion cannot go past, or the last @ char is the decider.\nvar auth,atSign;if(hostEnd===-1){// atSign can be anywhere.\natSign=rest.lastIndexOf('@');}else{// atSign must be in auth portion.\n// http://a@b/c@d => host:b auth:a path:/c@d\natSign=rest.lastIndexOf('@',hostEnd);}// Now we have a portion which is definitely the auth.\n// Pull that off.\nif(atSign!==-1){auth=rest.slice(0,atSign);rest=rest.slice(atSign+1);this.auth=decodeURIComponent(auth);}// the host is the remaining to the left of the first non-host char\nhostEnd=-1;for(var i=0;i<nonHostChars.length;i++){var hec=rest.indexOf(nonHostChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// if we still have not hit it, then the entire thing is a host.\nif(hostEnd===-1)hostEnd=rest.length;this.host=rest.slice(0,hostEnd);rest=rest.slice(hostEnd);// pull out port.\nthis.parseHost();// we've indicated that there is a hostname,\n// so even if it's empty, it has to be present.\nthis.hostname=this.hostname||'';// if hostname begins with [ and ends with ]\n// assume that it's an IPv6 address.\nvar ipv6Hostname=this.hostname[0]==='['&&this.hostname[this.hostname.length-1]===']';// validate a little.\nif(!ipv6Hostname){var hostparts=this.hostname.split(/\\./);for(var i=0,l=hostparts.length;i<l;i++){var part=hostparts[i];if(!part)continue;if(!part.match(hostnamePartPattern)){var newpart='';for(var j=0,k=part.length;j<k;j++){if(part.charCodeAt(j)>127){// we replace non-ASCII char with a temporary placeholder\n// we need this to make sure size of hostname is not\n// broken by replacing non-ASCII by nothing\nnewpart+='x';}else{newpart+=part[j];}}// we test again with ASCII char only\nif(!newpart.match(hostnamePartPattern)){var validParts=hostparts.slice(0,i);var notHost=hostparts.slice(i+1);var bit=part.match(hostnamePartStart);if(bit){validParts.push(bit[1]);notHost.unshift(bit[2]);}if(notHost.length){rest='/'+notHost.join('.')+rest;}this.hostname=validParts.join('.');break;}}}}if(this.hostname.length>hostnameMaxLen){this.hostname='';}else{// hostnames are always lower case.\nthis.hostname=this.hostname.toLowerCase();}if(!ipv6Hostname){// IDNA Support: Returns a puny coded representation of \"domain\".\n// It only converts the part of the domain name that\n// has non ASCII characters. I.e. it dosent matter if\n// you call it with a domain that already is in ASCII.\nvar domainArray=this.hostname.split('.');var newOut=[];for(var i=0;i<domainArray.length;++i){var s=domainArray[i];newOut.push(s.match(/[^A-Za-z0-9_-]/)?'xn--'+punycode.encode(s):s);}this.hostname=newOut.join('.');}var p=this.port?':'+this.port:'';var h=this.hostname||'';this.host=h+p;this.href+=this.host;// strip [ and ] from the hostname\n// the host field still retains them, though\nif(ipv6Hostname){this.hostname=this.hostname.substr(1,this.hostname.length-2);if(rest[0]!=='/'){rest='/'+rest;}}}// now rest is set to the post-host stuff.\n// chop off any delim chars.\nif(!unsafeProtocol[lowerProto]){// First, make 100% sure that any \"autoEscape\" chars get\n// escaped, even if encodeURIComponent doesn't think they\n// need to be.\nfor(var i=0,l=autoEscape.length;i<l;i++){var ae=autoEscape[i];var esc=encodeURIComponent(ae);if(esc===ae){esc=escape(ae);}rest=rest.split(ae).join(esc);}}// chop off from the tail first.\nvar hash=rest.indexOf('#');if(hash!==-1){// got a fragment string.\nthis.hash=rest.substr(hash);rest=rest.slice(0,hash);}var qm=rest.indexOf('?');if(qm!==-1){this.search=rest.substr(qm);this.query=rest.substr(qm+1);if(parseQueryString){this.query=querystring.parse(this.query);}rest=rest.slice(0,qm);}else if(parseQueryString){// no query string, but parseQueryString still requested\nthis.search='';this.query={};}if(rest)this.pathname=rest;if(slashedProtocol[lowerProto]&&this.hostname&&!this.pathname){this.pathname='/';}//to support http.request\nif(this.pathname||this.search){var p=this.pathname||'';var s=this.search||'';this.path=p+s;}// finally, reconstruct the href based on what has been validated.\nthis.href=this.format();return this;};// format a parsed object into a url string\nfunction urlFormat(obj){// ensure it's an object, and not a string url.\n// If it's an obj, this is a no-op.\n// this way, you can call url_format() on strings\n// to clean up potentially wonky urls.\nif(isString(obj))obj=urlParse(obj);if(!(obj instanceof Url))return Url.prototype.format.call(obj);return obj.format();}Url.prototype.format=function(){var auth=this.auth||'';if(auth){auth=encodeURIComponent(auth);auth=auth.replace(/%3A/i,':');auth+='@';}var protocol=this.protocol||'',pathname=this.pathname||'',hash=this.hash||'',host=false,query='';if(this.host){host=auth+this.host;}else if(this.hostname){host=auth+(this.hostname.indexOf(':')===-1?this.hostname:'['+this.hostname+']');if(this.port){host+=':'+this.port;}}if(this.query&&isObject(this.query)&&Object.keys(this.query).length){query=querystring.stringify(this.query);}var search=this.search||query&&'?'+query||'';if(protocol&&protocol.substr(-1)!==':')protocol+=':';// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n// unless they had them to begin with.\nif(this.slashes||(!protocol||slashedProtocol[protocol])&&host!==false){host='//'+(host||'');if(pathname&&pathname.charAt(0)!=='/')pathname='/'+pathname;}else if(!host){host='';}if(hash&&hash.charAt(0)!=='#')hash='#'+hash;if(search&&search.charAt(0)!=='?')search='?'+search;pathname=pathname.replace(/[?#]/g,function(match){return encodeURIComponent(match);});search=search.replace('#','%23');return protocol+host+pathname+search+hash;};function urlResolve(source,relative){return urlParse(source,false,true).resolve(relative);}Url.prototype.resolve=function(relative){return this.resolveObject(urlParse(relative,false,true)).format();};function urlResolveObject(source,relative){if(!source)return relative;return urlParse(source,false,true).resolveObject(relative);}Url.prototype.resolveObject=function(relative){if(isString(relative)){var rel=new Url();rel.parse(relative,false,true);relative=rel;}var result=new Url();Object.keys(this).forEach(function(k){result[k]=this[k];},this);// hash is always overridden, no matter what.\n// even href=\"\" will remove it.\nresult.hash=relative.hash;// if the relative url is empty, then there's nothing left to do here.\nif(relative.href===''){result.href=result.format();return result;}// hrefs like //foo/bar always cut to the protocol.\nif(relative.slashes&&!relative.protocol){// take everything except the protocol from relative\nObject.keys(relative).forEach(function(k){if(k!=='protocol')result[k]=relative[k];});//urlParse appends trailing / to urls like http://www.example.com\nif(slashedProtocol[result.protocol]&&result.hostname&&!result.pathname){result.path=result.pathname='/';}result.href=result.format();return result;}if(relative.protocol&&relative.protocol!==result.protocol){// if it's a known url protocol, then changing\n// the protocol does weird things\n// first, if it's not file:, then we MUST have a host,\n// and if there was a path\n// to begin with, then we MUST have a path.\n// if it is file:, then the host is dropped,\n// because that's known to be hostless.\n// anything else is assumed to be absolute.\nif(!slashedProtocol[relative.protocol]){Object.keys(relative).forEach(function(k){result[k]=relative[k];});result.href=result.format();return result;}result.protocol=relative.protocol;if(!relative.host&&!hostlessProtocol[relative.protocol]){var relPath=(relative.pathname||'').split('/');while(relPath.length&&!(relative.host=relPath.shift())){;}if(!relative.host)relative.host='';if(!relative.hostname)relative.hostname='';if(relPath[0]!=='')relPath.unshift('');if(relPath.length<2)relPath.unshift('');result.pathname=relPath.join('/');}else{result.pathname=relative.pathname;}result.search=relative.search;result.query=relative.query;result.host=relative.host||'';result.auth=relative.auth;result.hostname=relative.hostname||relative.host;result.port=relative.port;// to support http.request\nif(result.pathname||result.search){var p=result.pathname||'';var s=result.search||'';result.path=p+s;}result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;}var isSourceAbs=result.pathname&&result.pathname.charAt(0)==='/',isRelAbs=relative.host||relative.pathname&&relative.pathname.charAt(0)==='/',mustEndAbs=isRelAbs||isSourceAbs||result.host&&relative.pathname,removeAllDots=mustEndAbs,srcPath=result.pathname&&result.pathname.split('/')||[],relPath=relative.pathname&&relative.pathname.split('/')||[],psychotic=result.protocol&&!slashedProtocol[result.protocol];// if the url is a non-slashed url, then relative\n// links like ../.. should be able\n// to crawl up to the hostname, as well.  This is strange.\n// result.protocol has already been set by now.\n// Later on, put the first path part into the host field.\nif(psychotic){result.hostname='';result.port=null;if(result.host){if(srcPath[0]==='')srcPath[0]=result.host;else srcPath.unshift(result.host);}result.host='';if(relative.protocol){relative.hostname=null;relative.port=null;if(relative.host){if(relPath[0]==='')relPath[0]=relative.host;else relPath.unshift(relative.host);}relative.host=null;}mustEndAbs=mustEndAbs&&(relPath[0]===''||srcPath[0]==='');}if(isRelAbs){// it's absolute.\nresult.host=relative.host||relative.host===''?relative.host:result.host;result.hostname=relative.hostname||relative.hostname===''?relative.hostname:result.hostname;result.search=relative.search;result.query=relative.query;srcPath=relPath;// fall through to the dot-handling below.\n}else if(relPath.length){// it's relative\n// throw away the existing file, and take the new path instead.\nif(!srcPath)srcPath=[];srcPath.pop();srcPath=srcPath.concat(relPath);result.search=relative.search;result.query=relative.query;}else if(!isNullOrUndefined(relative.search)){// just pull out the search.\n// like href='?foo'.\n// Put this after the other two cases because it simplifies the booleans\nif(psychotic){result.hostname=result.host=srcPath.shift();//occationaly the auth can get stuck only in host\n//this especialy happens in cases like\n//url.resolveObject('mailto:local1@domain1', 'local2@domain2')\nvar authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}result.search=relative.search;result.query=relative.query;//to support http.request\nif(!isNull(result.pathname)||!isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.href=result.format();return result;}if(!srcPath.length){// no path at all.  easy.\n// we've already handled the other stuff above.\nresult.pathname=null;//to support http.request\nif(result.search){result.path='/'+result.search;}else{result.path=null;}result.href=result.format();return result;}// if a url ENDs in . or .., then it must get a trailing slash.\n// however, if it ends in anything else non-slashy,\n// then it must NOT get a trailing slash.\nvar last=srcPath.slice(-1)[0];var hasTrailingSlash=(result.host||relative.host)&&(last==='.'||last==='..')||last==='';// strip single dots, resolve double dots to parent dir\n// if the path tries to go above the root, `up` ends up > 0\nvar up=0;for(var i=srcPath.length;i>=0;i--){last=srcPath[i];if(last=='.'){srcPath.splice(i,1);}else if(last==='..'){srcPath.splice(i,1);up++;}else if(up){srcPath.splice(i,1);up--;}}// if the path is allowed to go above the root, restore leading ..s\nif(!mustEndAbs&&!removeAllDots){for(;up--;up){srcPath.unshift('..');}}if(mustEndAbs&&srcPath[0]!==''&&(!srcPath[0]||srcPath[0].charAt(0)!=='/')){srcPath.unshift('');}if(hasTrailingSlash&&srcPath.join('/').substr(-1)!=='/'){srcPath.push('');}var isAbsolute=srcPath[0]===''||srcPath[0]&&srcPath[0].charAt(0)==='/';// put the host back\nif(psychotic){result.hostname=result.host=isAbsolute?'':srcPath.length?srcPath.shift():'';//occationaly the auth can get stuck only in host\n//this especialy happens in cases like\n//url.resolveObject('mailto:local1@domain1', 'local2@domain2')\nvar authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}mustEndAbs=mustEndAbs||result.host&&srcPath.length;if(mustEndAbs&&!isAbsolute){srcPath.unshift('');}if(!srcPath.length){result.pathname=null;result.path=null;}else{result.pathname=srcPath.join('/');}//to support request.http\nif(!isNull(result.pathname)||!isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.auth=relative.auth||result.auth;result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;};Url.prototype.parseHost=function(){var host=this.host;var port=portPattern.exec(host);if(port){port=port[0];if(port!==':'){this.port=port.substr(1);}host=host.substr(0,host.length-port.length);}if(host)this.hostname=host;};function isString(arg){return typeof arg===\"string\";}function isObject(arg){return _typeof(arg)==='object'&&arg!==null;}function isNull(arg){return arg===null;}function isNullOrUndefined(arg){return arg==null;}/***/},/* 55 */ /***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module,global){/*! https://mths.be/punycode v1.3.2 by @mathias */;(function(root){/** Detect free variables */var freeExports=_typeof(exports)=='object'&&exports&&!exports.nodeType&&exports;var freeModule=_typeof(module)=='object'&&module&&!module.nodeType&&module;var freeGlobal=_typeof(global)=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal||freeGlobal.self===freeGlobal){root=freeGlobal;}/**\n\t\t * The `punycode` object.\n\t\t * @name punycode\n\t\t * @type Object\n\t\t */var punycode,/** Highest positive signed 32-bit float value */maxInt=2147483647,// aka. 0x7FFFFFFF or 2^31-1\n/** Bootstring parameters */base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,// 0x80\ndelimiter='-',// '\\x2D'\n/** Regular expressions */regexPunycode=/^xn--/,regexNonASCII=/[^\\x20-\\x7E]/,// unprintable ASCII chars + non-ASCII chars\nregexSeparators=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,// RFC 3490 separators\n/** Error messages */errors={'overflow':'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'},/** Convenience shortcuts */baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode,/** Temporary variable */key;/*--------------------------------------------------------------------------*/ /**\n\t\t * A generic error utility function.\n\t\t * @private\n\t\t * @param {String} type The error type.\n\t\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t\t */function error(type){throw RangeError(errors[type]);}/**\n\t\t * A generic `Array#map` utility function.\n\t\t * @private\n\t\t * @param {Array} array The array to iterate over.\n\t\t * @param {Function} callback The function that gets called for every array\n\t\t * item.\n\t\t * @returns {Array} A new array of values returned by the callback function.\n\t\t */function map(array,fn){var length=array.length;var result=[];while(length--){result[length]=fn(array[length]);}return result;}/**\n\t\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t\t * addresses.\n\t\t * @private\n\t\t * @param {String} domain The domain name or email address.\n\t\t * @param {Function} callback The function that gets called for every\n\t\t * character.\n\t\t * @returns {Array} A new string of characters returned by the callback\n\t\t * function.\n\t\t */function mapDomain(string,fn){var parts=string.split('@');var result='';if(parts.length>1){// In email addresses, only the domain name should be punycoded. Leave\n// the local part (i.e. everything up to `@`) intact.\nresult=parts[0]+'@';string=parts[1];}// Avoid `split(regex)` for IE8 compatibility. See #17.\nstring=string.replace(regexSeparators,'\\x2E');var labels=string.split('.');var encoded=map(labels,fn).join('.');return result+encoded;}/**\n\t\t * Creates an array containing the numeric code points of each Unicode\n\t\t * character in the string. While JavaScript uses UCS-2 internally,\n\t\t * this function will convert a pair of surrogate halves (each of which\n\t\t * UCS-2 exposes as separate characters) into a single code point,\n\t\t * matching UTF-16.\n\t\t * @see `punycode.ucs2.encode`\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode.ucs2\n\t\t * @name decode\n\t\t * @param {String} string The Unicode input string (UCS-2).\n\t\t * @returns {Array} The new array of code points.\n\t\t */function ucs2decode(string){var output=[],counter=0,length=string.length,value,extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){// high surrogate, and there is a next character\nextra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){// low surrogate\noutput.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{// unmatched surrogate; only append this code unit, in case the next\n// code unit is the high surrogate of a surrogate pair\noutput.push(value);counter--;}}else{output.push(value);}}return output;}/**\n\t\t * Creates a string based on an array of numeric code points.\n\t\t * @see `punycode.ucs2.decode`\n\t\t * @memberOf punycode.ucs2\n\t\t * @name encode\n\t\t * @param {Array} codePoints The array of numeric code points.\n\t\t * @returns {String} The new Unicode string (UCS-2).\n\t\t */function ucs2encode(array){return map(array,function(value){var output='';if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);return output;}).join('');}/**\n\t\t * Converts a basic code point into a digit/integer.\n\t\t * @see `digitToBasic()`\n\t\t * @private\n\t\t * @param {Number} codePoint The basic numeric code point value.\n\t\t * @returns {Number} The numeric value of a basic code point (for use in\n\t\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t\t * the code point does not represent a value.\n\t\t */function basicToDigit(codePoint){if(codePoint-48<10){return codePoint-22;}if(codePoint-65<26){return codePoint-65;}if(codePoint-97<26){return codePoint-97;}return base;}/**\n\t\t * Converts a digit/integer into a basic code point.\n\t\t * @see `basicToDigit()`\n\t\t * @private\n\t\t * @param {Number} digit The numeric value of a basic code point.\n\t\t * @returns {Number} The basic code point whose value (when used for\n\t\t * representing integers) is `digit`, which needs to be in the range\n\t\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t\t * used; else, the lowercase form is used. The behavior is undefined\n\t\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t\t */function digitToBasic(digit,flag){//  0..25 map to ASCII a..z or A..Z\n// 26..35 map to ASCII 0..9\nreturn digit+22+75*(digit<26)-((flag!=0)<<5);}/**\n\t\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t\t * @private\n\t\t */function adapt(delta,numPoints,firstTime){var k=0;delta=firstTime?floor(delta/damp):delta>>1;delta+=floor(delta/numPoints);for(;/* no initialization */delta>baseMinusTMin*tMax>>1;k+=base){delta=floor(delta/baseMinusTMin);}return floor(k+(baseMinusTMin+1)*delta/(delta+skew));}/**\n\t\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t\t * symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t\t * @returns {String} The resulting string of Unicode symbols.\n\t\t */function decode(input){// Don't use UCS-2\nvar output=[],inputLength=input.length,out,i=0,n=initialN,bias=initialBias,basic,j,index,oldi,w,k,digit,t,/** Cached calculation results */baseMinusT;// Handle the basic code points: let `basic` be the number of input code\n// points before the last delimiter, or `0` if there is none, then copy\n// the first basic code points to the output.\nbasic=input.lastIndexOf(delimiter);if(basic<0){basic=0;}for(j=0;j<basic;++j){// if it's not a basic code point\nif(input.charCodeAt(j)>=0x80){error('not-basic');}output.push(input.charCodeAt(j));}// Main decoding loop: start just after the last delimiter if any basic code\n// points were copied; start at the beginning otherwise.\nfor(index=basic>0?basic+1:0;index<inputLength;)/* no final expression */{// `index` is the index of the next character to be consumed.\n// Decode a generalized variable-length integer into `delta`,\n// which gets added to `i`. The overflow checking is easier\n// if we increase `i` as we go, then subtract off its starting\n// value at the end to obtain `delta`.\nfor(oldi=i,w=1,k=base;;/* no condition */k+=base){if(index>=inputLength){error('invalid-input');}digit=basicToDigit(input.charCodeAt(index++));if(digit>=base||digit>floor((maxInt-i)/w)){error('overflow');}i+=digit*w;t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(digit<t){break;}baseMinusT=base-t;if(w>floor(maxInt/baseMinusT)){error('overflow');}w*=baseMinusT;}out=output.length+1;bias=adapt(i-oldi,out,oldi==0);// `i` was supposed to wrap around from `out` to `0`,\n// incrementing `n` each time, so we'll fix that now:\nif(floor(i/out)>maxInt-n){error('overflow');}n+=floor(i/out);i%=out;// Insert `n` at position `i` of the output\noutput.splice(i++,0,n);}return ucs2encode(output);}/**\n\t\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t\t * Punycode string of ASCII-only symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The string of Unicode symbols.\n\t\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t\t */function encode(input){var n,delta,handledCPCount,basicLength,bias,j,m,q,k,t,currentValue,output=[],/** `inputLength` will hold the number of code points in `input`. */inputLength,/** Cached calculation results */handledCPCountPlusOne,baseMinusT,qMinusT;// Convert the input in UCS-2 to Unicode\ninput=ucs2decode(input);// Cache the length\ninputLength=input.length;// Initialize the state\nn=initialN;delta=0;bias=initialBias;// Handle the basic code points\nfor(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<0x80){output.push(stringFromCharCode(currentValue));}}handledCPCount=basicLength=output.length;// `handledCPCount` is the number of code points that have been handled;\n// `basicLength` is the number of basic code points.\n// Finish the basic string - if it is not empty - with a delimiter\nif(basicLength){output.push(delimiter);}// Main encoding loop:\nwhile(handledCPCount<inputLength){// All non-basic code points < n have been handled already. Find the next\n// larger one:\nfor(m=maxInt,j=0;j<inputLength;++j){currentValue=input[j];if(currentValue>=n&&currentValue<m){m=currentValue;}}// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n// but guard against overflow\nhandledCPCountPlusOne=handledCPCount+1;if(m-n>floor((maxInt-delta)/handledCPCountPlusOne)){error('overflow');}delta+=(m-n)*handledCPCountPlusOne;n=m;for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<n&&++delta>maxInt){error('overflow');}if(currentValue==n){// Represent delta as a generalized variable-length integer\nfor(q=delta,k=base;;/* no condition */k+=base){t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(q<t){break;}qMinusT=q-t;baseMinusT=base-t;output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0)));q=floor(qMinusT/baseMinusT);}output.push(stringFromCharCode(digitToBasic(q,0)));bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength);delta=0;++handledCPCount;}}++delta;++n;}return output.join('');}/**\n\t\t * Converts a Punycode string representing a domain name or an email address\n\t\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t\t * it doesn't matter if you call it on a string that has already been\n\t\t * converted to Unicode.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycoded domain name or email address to\n\t\t * convert to Unicode.\n\t\t * @returns {String} The Unicode representation of the given Punycode\n\t\t * string.\n\t\t */function toUnicode(input){return mapDomain(input,function(string){return regexPunycode.test(string)?decode(string.slice(4).toLowerCase()):string;});}/**\n\t\t * Converts a Unicode string representing a domain name or an email address to\n\t\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t\t * ASCII.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The domain name or email address to convert, as a\n\t\t * Unicode string.\n\t\t * @returns {String} The Punycode representation of the given domain name or\n\t\t * email address.\n\t\t */function toASCII(input){return mapDomain(input,function(string){return regexNonASCII.test(string)?'xn--'+encode(string):string;});}/*--------------------------------------------------------------------------*/ /** Define the public API */punycode={/**\n\t\t\t * A string representing the current Punycode.js version number.\n\t\t\t * @memberOf punycode\n\t\t\t * @type String\n\t\t\t */'version':'1.3.2',/**\n\t\t\t * An object of methods to convert from JavaScript's internal character\n\t\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t\t * @memberOf punycode\n\t\t\t * @type Object\n\t\t\t */'ucs2':{'decode':ucs2decode,'encode':ucs2encode},'decode':decode,'encode':encode,'toASCII':toASCII,'toUnicode':toUnicode};/** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns\n// like the following:\nif(true){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return punycode;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else {}})(this);/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(56)(module),function(){return this;}());/***/},/* 56 */ /***/function(module,exports){module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default\nmodule.children=[];module.webpackPolyfill=1;}return module;};/***/},/* 57 */ /***/function(module,exports,__webpack_require__){'use strict';exports.decode=exports.parse=__webpack_require__(58);exports.encode=exports.stringify=__webpack_require__(59);/***/},/* 58 */ /***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}module.exports=function(qs,sep,eq,options){sep=sep||'&';eq=eq||'=';var obj={};if(typeof qs!=='string'||qs.length===0){return obj;}var regexp=/\\+/g;qs=qs.split(sep);var maxKeys=1000;if(options&&typeof options.maxKeys==='number'){maxKeys=options.maxKeys;}var len=qs.length;// maxKeys <= 0 means that we should not limit keys count\nif(maxKeys>0&&len>maxKeys){len=maxKeys;}for(var i=0;i<len;++i){var x=qs[i].replace(regexp,'%20'),idx=x.indexOf(eq),kstr,vstr,k,v;if(idx>=0){kstr=x.substr(0,idx);vstr=x.substr(idx+1);}else{kstr=x;vstr='';}k=decodeURIComponent(kstr);v=decodeURIComponent(vstr);if(!hasOwnProperty(obj,k)){obj[k]=v;}else if(Array.isArray(obj[k])){obj[k].push(v);}else{obj[k]=[obj[k],v];}}return obj;};/***/},/* 59 */ /***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';var stringifyPrimitive=function stringifyPrimitive(v){switch(_typeof(v)){case'string':return v;case'boolean':return v?'true':'false';case'number':return isFinite(v)?v:'';default:return'';}};module.exports=function(obj,sep,eq,name){sep=sep||'&';eq=eq||'=';if(obj===null){obj=undefined;}if(_typeof(obj)==='object'){return Object.keys(obj).map(function(k){var ks=encodeURIComponent(stringifyPrimitive(k))+eq;if(Array.isArray(obj[k])){return obj[k].map(function(v){return ks+encodeURIComponent(stringifyPrimitive(v));}).join(sep);}else{return ks+encodeURIComponent(stringifyPrimitive(obj[k]));}}).join(sep);}if(!name)return'';return encodeURIComponent(stringifyPrimitive(name))+eq+encodeURIComponent(stringifyPrimitive(obj));};/***/},/* 60 */ /***/function(module,exports){module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;function extend(){var target={};for(var i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;}/***/},/* 61 */ /***/function(module,exports,__webpack_require__){'use strict';var net=__webpack_require__(62);/*\n\t  variables port and host can be removed since\n\t  you have all required information in opts object\n\t*/function buildBuilder(client,opts){var port,host;opts.port=opts.port||1883;opts.hostname=opts.hostname||opts.host||'localhost';port=opts.port;host=opts.hostname;return net.createConnection(port,host);}module.exports=buildBuilder;/***/},/* 62 */ /***/function(module,exports){/* (ignored) */ /***/},/* 63 */ /***/function(module,exports,__webpack_require__){'use strict';var tls=__webpack_require__(64);function buildBuilder(mqttClient,opts){var connection;opts.port=opts.port||8883;opts.host=opts.hostname||opts.host||'localhost';opts.rejectUnauthorized=false!==opts.rejectUnauthorized;connection=tls.connect(opts);/*eslint no-use-before-define: [2, \"nofunc\"]*/connection.on('secureConnect',function(){if(opts.rejectUnauthorized&&!connection.authorized){connection.emit('error',new Error('TLS not authorized'));}else{connection.removeListener('error',handleTLSerrors);}});/*\n\t   * to comply with strict rules, a function must be\n\t   * declared before it can be used\n\t   * so i moved it has to be  moved before its first call\n\t   * later on maybe we can move all of them to the top of the file\n\t   * for now i just suppressed the warning\n\t   */ /*jshint latedef:false*/function handleTLSerrors(err){// How can I get verify this error is a tls error?\nif(opts.rejectUnauthorized){mqttClient.emit('error',err);}// close this connection to match the behaviour of net\n// otherwise all we get is an error from the connection\n// and close event doesn't fire. This is a work around\n// to enable the reconnect code to work the same as with\n// net.createConnection\nconnection.end();}/*jshint latedef:false*/connection.on('error',handleTLSerrors);return connection;}module.exports=buildBuilder;/***/},/* 64 */ /***/function(module,exports){/* (ignored) */ /***/},/* 65 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';var websocket=__webpack_require__(66),_URL=__webpack_require__(54),wssProperties=['rejectUnauthorized','ca','cert','key','pfx','passphrase'];function buildBuilder(client,opts){var wsOpt={protocol:'mqttv3.1'},host=opts.hostname||'localhost',port=String(opts.port||80),path=opts.path||'/',url=opts.protocol+'://'+host+':'+port+path;if('wss'===opts.protocol){wssProperties.forEach(function(prop){if(opts.hasOwnProperty(prop)){wsOpt[prop]=opts[prop];}});}return websocket(url,wsOpt);}function buildBuilderBrowser(mqttClient,opts){var url,parsed;if('undefined'!==typeof document){// for Web Workers! P.S: typeof(document) !== undefined may be becoming the faster one these days.\nparsed=_URL.parse(document.URL);}else{throw new Error('Could not determine host. Specify host manually.');}if(!opts.protocol){if('https:'===parsed.protocol){opts.protocol='wss';}else{opts.protocol='ws';}}if(!opts.hostname){opts.hostname=opts.host;}if(!opts.hostname){opts.hostname=parsed.hostname;if(!opts.port){opts.port=parsed.port;}}if(!opts.port){if('wss'===opts.protocol){opts.port=443;}else{opts.port=80;}}if(!opts.path){opts.path='/';}url=opts.protocol+'://'+opts.hostname+':'+opts.port+opts.path;return websocket(url,'mqttv3.1');}if('browser'!==process.title){module.exports=buildBuilder;}else{module.exports=buildBuilderBrowser;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 66 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,global,Buffer){var through=__webpack_require__(67);var duplexify=__webpack_require__(77);var WS=__webpack_require__(89);module.exports=WebSocketStream;function WebSocketStream(target,protocols,options){var stream,socket;var isBrowser=process.title==='browser';var isNative=!!global.WebSocket;var socketWrite=isBrowser?socketWriteBrowser:socketWriteNode;var proxy=through.obj(socketWrite,socketEnd);if(protocols&&!Array.isArray(protocols)&&'object'===_typeof(protocols)){// accept the \"options\" Object as the 2nd argument\noptions=protocols;protocols=null;}if(!options)options={};// browser only: sets the maximum socket buffer size before throttling\nvar bufferSize=options.browserBufferSize||1024*512;// browser only: how long to wait when throttling\nvar bufferTimeout=options.browserBufferTimeout||1000;// use existing WebSocket object that was passed in\nif(_typeof(target)==='object'){socket=target;// otherwise make a new one\n}else{// special constructor treatment for native websockets in browsers, see\n// https://github.com/maxogden/websocket-stream/issues/82\nif(isNative&&isBrowser){socket=new WS(target,protocols);}else{socket=new WS(target,protocols,options);}socket.binaryType='arraybuffer';}// was already open when passed in\nif(socket.readyState===WS.OPEN){stream=proxy;}else{stream=duplexify.obj();socket.onopen=onopen;}stream.socket=socket;socket.onclose=onclose;socket.onerror=onerror;socket.onmessage=onmessage;proxy.on('close',destroy);var coerceToBuffer=options.binary||options.binary===undefined;function socketWriteNode(chunk,enc,next){if(coerceToBuffer&&!(chunk instanceof Buffer)){chunk=new Buffer(chunk,'utf8');}socket.send(chunk,next);}function socketWriteBrowser(chunk,enc,next){if(socket.bufferedAmount>bufferSize){setTimeout(socketWriteBrowser,bufferTimeout,chunk,enc,next);return;}try{socket.send(chunk);}catch(err){return next(err);}next();}function socketEnd(done){socket.close();done();}function onopen(){stream.setReadable(proxy);stream.setWritable(proxy);stream.emit('connect');}function onclose(){stream.end();stream.destroy();}function onerror(err){stream.destroy(err);}function onmessage(event){var data=event.data;if(data instanceof ArrayBuffer)data=new Buffer(new Uint8Array(data));else data=new Buffer(data);proxy.push(data);}function destroy(){socket.close();}return stream;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1),function(){return this;}(),__webpack_require__(12).Buffer);/***/},/* 67 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){var Transform=__webpack_require__(68),inherits=__webpack_require__(47).inherits,xtend=__webpack_require__(60);function DestroyableTransform(opts){Transform.call(this,opts);this._destroyed=false;}inherits(DestroyableTransform,Transform);DestroyableTransform.prototype.destroy=function(err){if(this._destroyed)return;this._destroyed=true;var self=this;process.nextTick(function(){if(err)self.emit('error',err);self.emit('close');});};// a noop _transform function\nfunction noop(chunk,enc,callback){callback(null,chunk);}// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2(construct){return function(options,transform,flush){if(typeof options=='function'){flush=transform;transform=options;options={};}if(typeof transform!='function')transform=noop;if(typeof flush!='function')flush=null;return construct(options,transform,flush);};}// main export, just make me a transform stream!\nmodule.exports=through2(function(options,transform,flush){var t2=new DestroyableTransform(options);t2._transform=transform;if(flush)t2._flush=flush;return t2;});// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor=through2(function(options,transform,flush){function Through2(override){if(!(this instanceof Through2))return new Through2(override);this.options=xtend(options,override);DestroyableTransform.call(this,this.options);}inherits(Through2,DestroyableTransform);Through2.prototype._transform=transform;if(flush)Through2.prototype._flush=flush;return Through2;});module.exports.obj=through2(function(options,transform,flush){var t2=new DestroyableTransform(xtend({objectMode:true,highWaterMark:16},options));t2._transform=transform;if(flush)t2._flush=flush;return t2;});/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 68 */ /***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(69);/***/},/* 69 */ /***/function(module,exports,__webpack_require__){// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';module.exports=Transform;var Duplex=__webpack_require__(70);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/util.inherits(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);// when the writable side finishes, then flush out anything remaining.\nvar stream=this;// start out asking for a readable event once data is transformed.\nthis._readableState.needReadable=true;// we have implemented the _read method, and done the other things\n// that Readable wants before the first _read call, so unset the\n// sync guard flag.\nthis._readableState.sync=false;if(options){if(typeof options.transform==='function')this._transform=options.transform;if(typeof options.flush==='function')this._flush=options.flush;}this.once('prefinish',function(){if(typeof this._flush==='function')this._flush(function(er){done(stream,er);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform=function(chunk,encoding,cb){throw new Error('not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in\n// will get processed, now that we've asked for it.\nts.needTransform=true;}};function done(stream,er){if(er)return stream.emit('error',er);// if there's nothing in the write buffer, then that means\n// that nothing more will ever be provided\nvar ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error('calling transform done when ws.length != 0');if(ts.transforming)throw new Error('calling transform done when still transforming');return stream.push(null);}/***/},/* 70 */ /***/function(module,exports,__webpack_require__){// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';/*<replacement>*/var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/module.exports=Duplex;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/var Readable=__webpack_require__(72);var Writable=__webpack_require__(74);util.inherits(Duplex,Readable);var keys=objectKeys(Writable.prototype);for(var v=0;v<keys.length;v++){var method=keys[v];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer\nfunction onend(){// if we allow half-open state, or if the writable side ended,\n// then we're ok.\nif(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.\n// But allow more writes to happen in this tick.\nprocessNextTick(onEndNT,this);}function onEndNT(self){self.end();}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}/***/},/* 71 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';if(!process.version||process.version.indexOf('v0.')===0||process.version.indexOf('v1.')===0&&process.version.indexOf('v1.8.')!==0){module.exports=nextTick;}else{module.exports=process.nextTick;}function nextTick(fn,arg1,arg2,arg3){if(typeof fn!=='function'){throw new TypeError('\"callback\" argument must be a function');}var len=arguments.length;var args,i;switch(len){case 0:case 1:return process.nextTick(fn);case 2:return process.nextTick(function afterTickOne(){fn.call(null,arg1);});case 3:return process.nextTick(function afterTickTwo(){fn.call(null,arg1,arg2);});case 4:return process.nextTick(function afterTickThree(){fn.call(null,arg1,arg2,arg3);});default:args=new Array(len-1);i=0;while(i<args.length){args[i++]=arguments[i];}return process.nextTick(function afterTick(){fn.apply(null,args);});}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 72 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';module.exports=Readable;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var isArray=__webpack_require__(32);/*</replacement>*/ /*<replacement>*/var Buffer=__webpack_require__(29).Buffer;/*</replacement>*/Readable.ReadableState=ReadableState;var EE=__webpack_require__(3);/*<replacement>*/var EElistenerCount=function EElistenerCount(emitter,type){return emitter.listeners(type).length;};/*</replacement>*/ /*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(6);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(3).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(29).Buffer;/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/ /*<replacement>*/var debugUtil=__webpack_require__(73);var debug=undefined;if(debugUtil&&debugUtil.debuglog){debug=debugUtil.debuglog('stream');}else{debug=function debug(){};}/*</replacement>*/var StringDecoder;util.inherits(Readable,Stream);var Duplex;function ReadableState(options,stream){Duplex=Duplex||__webpack_require__(70);options=options||{};// object stream flag. Used to make read(n) ignore n and to\n// make all the buffer merging and length checks go away\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// the point at which it stops calling _read() to fill the buffer\n// Note: 0 is a valid value, means \"don't call _read preemptively ever\"\nvar hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.buffer=[];this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// whenever we return null, then we set a flag to say\n// that we're awaiting a 'readable' event emission.\nthis.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen\n// after read()ing all the bytes and not getting any pushback.\nthis.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s\nthis.awaitDrain=0;// if true, a maybeReadMore has been scheduled\nthis.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}var Duplex;function Readable(options){Duplex=Duplex||__webpack_require__(70);if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy\nthis.readable=true;if(options&&typeof options.read==='function')this._read=options.read;Stream.call(this);}// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push=function(chunk,encoding){var state=this._readableState;if(!state.objectMode&&typeof chunk==='string'){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=new Buffer(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};Readable.prototype.isPaused=function(){return this._readableState.flowing===false;};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(chunk===null){state.reading=false;onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var e=new Error('stream.unshift() after end event');stream.emit('error',e);}else{var skipAdd;if(state.decoder&&!addToFront&&!encoding){chunk=state.decoder.write(chunk);skipAdd=!state.objectMode&&chunk.length===0;}if(!addToFront)state.reading=false;// Don't add to the buffer if we've decoded to an empty string chunk and\n// we're not in object mode\nif(!skipAdd){// if we want the data now, just emit it.\nif(state.flowing&&state.length===0&&!state.sync){stream.emit('data',chunk);stream.read(0);}else{// update the buffer info.\nstate.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}}maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.\nReadable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this;};// Don't raise the hwm > 8MB\nvar MAX_HWM=0x800000;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2\nn--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n;}function howMuchToRead(n,state){if(state.length===0&&state.ended)return 0;if(state.objectMode)return n===0?0:1;if(n===null||isNaN(n)){// only flow one buffer at a time\nif(state.flowing&&state.buffer.length)return state.buffer[0].length;else return state.length;}if(n<=0)return 0;// If we're asking for more than the target buffer level,\n// then raise the water mark.  Bump up to the next highest\n// power of 2, to prevent increasing it excessively in tiny\n// amounts.\nif(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);// don't have that much.  return null, unless we've ended.\nif(n>state.length){if(!state.ended){state.needReadable=true;return 0;}else{return state.length;}}return n;}// you can override either this method, or the async _read(n) below.\nReadable.prototype.read=function(n){debug('read',n);var state=this._readableState;var nOrig=n;if(typeof n!=='number'||n>0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we\n// already have a bunch of data in the buffer, then just trigger\n// the 'readable' event and move on.\nif(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.\nif(n===0&&state.ended){if(state.length===0)endReadable(this);return null;}// All the actual chunk generation logic needs to be\n// *below* the call to _read.  The reason is that in certain\n// synthetic stream cases, such as passthrough streams, _read\n// may be a completely synchronous operation which may change\n// the state of the read buffer, providing enough data when\n// before there was *not* enough.\n//\n// So, the steps are:\n// 1. Figure out what the state of things will be after we do\n// a read from the buffer.\n//\n// 2. If that resulting state will trigger a _read, then call _read.\n// Note that this may be asynchronous, or synchronous.  Yes, it is\n// deeply ugly to write APIs this way, but that still doesn't mean\n// that the Readable class should behave improperly, as streams are\n// designed to be sync/async agnostic.\n// Take note if the _read call is sync or async (ie, if the read call\n// has returned yet), so that we know whether or not it's safe to emit\n// 'readable' etc.\n//\n// 3. Actually pull the requested chunks out of the buffer and return.\n// if we need a readable event, then we need to do some reading.\nvar doRead=state.needReadable;debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some\nif(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already\n// reading, then it's unnecessary.\nif(state.ended||state.reading){doRead=false;debug('reading or ended',doRead);}if(doRead){debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.\nif(state.length===0)state.needReadable=true;// call internal read method\nthis._read(state.highWaterMark);state.sync=false;}// If _read pushed data synchronously, then `reading` will be false,\n// and we need to re-evaluate how much data we can return to the user.\nif(doRead&&!state.reading)n=howMuchToRead(nOrig,state);var ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0;}state.length-=n;// If we have nothing in the buffer, then we want to know\n// as soon as we *do* get something into the buffer.\nif(state.length===0&&!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.\nif(nOrig!==n&&state.ended&&state.length===0)endReadable(this);if(ret!==null)this.emit('data',ret);return ret;};function chunkInvalid(state,chunk){var er=null;if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// emit 'readable' now to make sure it gets picked up.\nemitReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug('emitReadable',state.flowing);state.emittedReadable=true;if(state.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream);}}function emitReadable_(stream){debug('emit readable');stream.emit('readable');flow(stream);}// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;processNextTick(maybeReadMore_,stream,state);}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.\nbreak;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read=function(n){this.emit('error',new Error('not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)processNextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){debug('onunpipe');if(readable===src){cleanup();}}function onend(){debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter\n// on the source.  This would be more elegant with a .once()\n// handler in flow(), but adding and removing repeatedly is\n// too slow.\nvar ondrain=pipeOnDrain(src);dest.on('drain',ondrain);var cleanedUp=false;function cleanup(){debug('cleanup');// cleanup event handlers once the pipe is broken\ndest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);src.removeListener('data',ondata);cleanedUp=true;// if the reader is waiting for a drain event from this\n// specific writer, then it would cause it to never start\n// flowing again.\n// So, if this is awaiting a drain, then we just call it now.\n// If we don't know, then assume that we are waiting for one.\nif(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}src.on('data',ondata);function ondata(chunk){debug('ondata');var ret=dest.write(chunk);if(false===ret){// If the user unpiped during `dest.write()`, it is possible\n// to get stuck in a permanently paused state if that write\n// also returned false.\nif(state.pipesCount===1&&state.pipes[0]===dest&&src.listenerCount('data')===1&&!cleanedUp){debug('false write response, pause',src._readableState.awaitDrain);src._readableState.awaitDrain++;}src.pause();}}// if the dest has an error, then stop piping into it.\n// however, don't suppress the throwing behavior for this.\nfunction onerror(er){debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(EElistenerCount(dest,'error')===0)dest.emit('error',er);}// This is a brutally ugly hack to make sure that our error handler\n// is attached before any userland ones.  NEVER DO THIS.\nif(!dest._events||!dest._events.error)dest.on('error',onerror);else if(isArray(dest._events.error))dest._events.error.unshift(onerror);else dest._events.error=[onerror,dest._events.error];// Both close and finish should trigger unpipe, but only once.\nfunction onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to\ndest.emit('pipe',src);// start the flow if it hasn't been started already.\nif(!state.flowing){debug('pipe resume');src.resume();}return dest;};function pipeOnDrain(src){return function(){var state=src._readableState;debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EElistenerCount(src,'data')){state.flowing=true;flow(src);}};}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.\nif(state.pipesCount===0)return this;// just one destination.  most common case.\nif(state.pipesCount===1){// passed in one, but it's not the right one.\nif(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.\nstate.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.\nif(!dest){// remove all.\nvar dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var _i=0;_i<len;_i++){dests[_i].emit('unpipe',this);}return this;}// try to find the right one.\nvar i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);// If listening to data, and it has not explicitly been paused,\n// then call resume to start the flow of data on the next tick.\nif(ev==='data'&&false!==this._readableState.flowing){this.resume();}if(ev==='readable'&&!this._readableState.endEmitted){var state=this._readableState;if(!state.readableListening){state.readableListening=true;state.emittedReadable=false;state.needReadable=true;if(!state.reading){processNextTick(nReadingNextTick,this);}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self){debug('readable nexttick read 0');self.read(0);}// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug('resume');state.flowing=true;resume(this,state);}return this;};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;processNextTick(resume_,stream,state);}}function resume_(stream,state){if(!state.reading){debug('resume read 0');stream.read(0);}state.resumeScheduled=false;stream.emit('resume');flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug('call pause flowing=%j',this._readableState.flowing);if(false!==this._readableState.flowing){debug('pause');this._readableState.flowing=false;this.emit('pause');}return this;};function flow(stream){var state=stream._readableState;debug('flow',state.flowing);if(state.flowing){do{var chunk=stream.read();}while(null!==chunk&&state.flowing);}}// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode\nif(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.\n// important when wrapping filters and duplexes.\nfor(var i in stream){if(this[i]===undefined&&typeof stream[i]==='function'){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.\nvar events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the\n// underlying stream.\nself._read=function(n){debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.\nReadable._fromList=fromList;// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n,state){var list=state.buffer;var length=state.length;var stringMode=!!state.decoder;var objectMode=!!state.objectMode;var ret;// nothing in the list, definitely empty.\nif(list.length===0)return null;if(length===0)ret=null;else if(objectMode)ret=list.shift();else if(!n||n>=length){// read it all, truncate the array.\nif(stringMode)ret=list.join('');else if(list.length===1)ret=list[0];else ret=Buffer.concat(list,length);list.length=0;}else{// read just some of it.\nif(n<list[0].length){// just take a part of the first list item.\n// slice is the same for buffers and strings.\nvar buf=list[0];ret=buf.slice(0,n);list[0]=buf.slice(n);}else if(n===list[0].length){// first list is a perfect match\nret=list.shift();}else{// complex case.\n// we have enough to cover it, but it spans past the first buffer.\nif(stringMode)ret='';else ret=new Buffer(n);var c=0;for(var i=0,l=list.length;i<l&&c<n;i++){var buf=list[0];var cpy=Math.min(n-c,buf.length);if(stringMode)ret+=buf.slice(0,cpy);else buf.copy(ret,c,0,cpy);if(cpy<buf.length)list[0]=buf.slice(cpy);else list.shift();c+=cpy;}}}return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a\n// bug in node.  Should never happen.\nif(state.length>0)throw new Error('endReadable called on non-empty stream');if(!state.endEmitted){state.ended=true;processNextTick(endReadableNT,state,stream);}}function endReadableNT(state,stream){// Check that we didn't get one last unshift.\nif(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 73 */ /***/function(module,exports){/* (ignored) */ /***/},/* 74 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,setImmediate){// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';module.exports=Writable;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var asyncWrite=!process.browser&&['v0.10','v0.9.'].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick;/*</replacement>*/ /*<replacement>*/var Buffer=__webpack_require__(29).Buffer;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/ /*<replacement>*/var internalUtil={deprecate:__webpack_require__(76)};/*</replacement>*/ /*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(6);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(3).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(29).Buffer;util.inherits(Writable,Stream);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null;}var Duplex;function WritableState(options,stream){Duplex=Duplex||__webpack_require__(70);options=options||{};// object stream flag to indicate whether or not this stream\n// contains buffers or objects.\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false\n// Note: 0 is a valid value, means that we always return false if\n// the entire buffer is not flushed immediately on write()\nvar hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.needDrain=false;// at the start of calling end()\nthis.ending=false;// when end() has been called, and returned\nthis.ended=false;// when 'finish' is emitted\nthis.finished=false;// should we decode strings into buffers before passing to _write?\n// this is here so that some node-core streams can optimize string\n// handling at a lower level.\nvar noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement\n// of how much we're waiting to get pushed to some underlying\n// socket or file.\nthis.length=0;// a flag to see when we're in the middle of a write.\nthis.writing=false;// when true all writes will be buffered until .uncork() call\nthis.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// a flag to know if we're processing previously buffered items, which\n// may call the _write() callback in the same tick, so that we don't\n// end up in an overlapped onwrite situation.\nthis.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)\nthis.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)\nthis.writecb=null;// the amount that is being written when _write is called.\nthis.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks\n// this must be 0 before 'finish' can be emitted\nthis.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs\n// This is relevant for synchronous Transform streams\nthis.prefinished=false;// True if the error was already emitted and should not be thrown again\nthis.errorEmitted=false;// count buffered requests\nthis.bufferedRequestCount=0;// create the two objects needed to store the corked requests\n// they are not a linked list, as no new elements are inserted in there\nthis.corkedRequestsFree=new CorkedRequest(this);this.corkedRequestsFree.next=new CorkedRequest(this);}WritableState.prototype.getBuffer=function writableStateGetBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};(function(){try{Object.defineProperty(WritableState.prototype,'buffer',{get:internalUtil.deprecate(function(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.')});}catch(_){}})();var Duplex;function Writable(options){Duplex=Duplex||__webpack_require__(70);// Writable ctor is applied to Duplexes, though they're not\n// instanceof Writable, they're instanceof Readable.\nif(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);// legacy.\nthis.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;}Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe. Not readable.'));};function writeAfterEnd(stream,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb\nstream.emit('error',er);processNextTick(cb,er);}// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream,state,chunk,cb){var valid=true;if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){var er=new TypeError('Invalid non-string/buffer chunk');stream.emit('error',er);processNextTick(cb,er);valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==='function'){cb=encoding;encoding=null;}if(Buffer.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=nop;if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){var state=this._writableState;state.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.\nif(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new TypeError('Unknown encoding: '+encoding);this._writableState.defaultEncoding=encoding;};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=new Buffer(chunk,encoding);}return chunk;}// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.\nif(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync)processNextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet\nvar finished=needFinish(state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state);}if(sync){/*<replacement>*/asyncWrite(afterWrite,stream,state,finished,cb);/*</replacement>*/}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()\nvar l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1;}doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is always async, defer these to save a bit of time\n// as the hot path ends with doWrite\nstate.pendingcb++;state.lastBufferedRequest=null;state.corkedRequestsFree=holder.next;holder.next=null;}else{// Slow case, write chunks one-by-one\nwhile(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;// if we didn't call the onwrite immediately, then\n// it means that we need to wait until it does.\n// also, that means that the chunk and cb are currently\n// being processed, so move the buffer counter past them.\nif(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequestCount=0;state.bufferedRequest=entry;state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('not implemented'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks\nif(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.\nif(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit('prefinish');}}function finishMaybe(stream,state){var need=needFinish(state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit('finish');}else{prefinish(stream,state);}}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)processNextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}if(state.corkedRequestsFree){state.corkedRequestsFree.next=_this;}else{state.corkedRequestsFree=_this;}};}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1),__webpack_require__(75).setImmediate);/***/},/* 75 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(setImmediate,clearImmediate){var nextTick=__webpack_require__(1).nextTick;var apply=Function.prototype.apply;var slice=Array.prototype.slice;var immediateIds={};var nextImmediateId=0;// DOM APIs, for completeness\nexports.setTimeout=function(){return new Timeout(apply.call(setTimeout,window,arguments),clearTimeout);};exports.setInterval=function(){return new Timeout(apply.call(setInterval,window,arguments),clearInterval);};exports.clearTimeout=exports.clearInterval=function(timeout){timeout.close();};function Timeout(id,clearFn){this._id=id;this._clearFn=clearFn;}Timeout.prototype.unref=Timeout.prototype.ref=function(){};Timeout.prototype.close=function(){this._clearFn.call(window,this._id);};// Does not start the time, just sets up the members needed.\nexports.enroll=function(item,msecs){clearTimeout(item._idleTimeoutId);item._idleTimeout=msecs;};exports.unenroll=function(item){clearTimeout(item._idleTimeoutId);item._idleTimeout=-1;};exports._unrefActive=exports.active=function(item){clearTimeout(item._idleTimeoutId);var msecs=item._idleTimeout;if(msecs>=0){item._idleTimeoutId=setTimeout(function onTimeout(){if(item._onTimeout)item._onTimeout();},msecs);}};// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate=typeof setImmediate===\"function\"?setImmediate:function(fn){var id=nextImmediateId++;var args=arguments.length<2?false:slice.call(arguments,1);immediateIds[id]=true;nextTick(function onNextTick(){if(immediateIds[id]){// fn.call() is faster so we optimize for the common use-case\n// @see http://jsperf.com/call-apply-segu\nif(args){fn.apply(null,args);}else{fn.call(null);}// Prevent ids from leaking\nexports.clearImmediate(id);}});return id;};exports.clearImmediate=typeof clearImmediate===\"function\"?clearImmediate:function(id){delete immediateIds[id];};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(75).setImmediate,__webpack_require__(75).clearImmediate);/***/},/* 76 */ /***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){/**\n\t * Module exports.\n\t */module.exports=deprecate;/**\n\t * Mark that a method should not be used.\n\t * Returns a modified function which warns once by default.\n\t *\n\t * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n\t *\n\t * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n\t * will throw an Error when invoked.\n\t *\n\t * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n\t * will invoke `console.trace()` instead of `console.error()`.\n\t *\n\t * @param {Function} fn - the function to deprecate\n\t * @param {String} msg - the string to print to the console when `fn` is invoked\n\t * @returns {Function} a new \"deprecated\" version of `fn`\n\t * @api public\n\t */function deprecate(fn,msg){if(config('noDeprecation')){return fn;}var warned=false;function deprecated(){if(!warned){if(config('throwDeprecation')){throw new Error(msg);}else if(config('traceDeprecation')){console.trace(msg);}else{console.warn(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;}/**\n\t * Checks `localStorage` for boolean values for the given `name`.\n\t *\n\t * @param {String} name\n\t * @returns {Boolean}\n\t * @api private\n\t */function config(name){// accessing global.localStorage can trigger a DOMException in sandboxed iframes\ntry{if(!global.localStorage)return false;}catch(_){return false;}var val=global.localStorage[name];if(null==val)return false;return String(val).toLowerCase()==='true';}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 77 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,process){var stream=__webpack_require__(78);var eos=__webpack_require__(87);var inherits=__webpack_require__(34);var shift=__webpack_require__(88);var SIGNAL_FLUSH=new Buffer([0]);var onuncork=function onuncork(self,fn){if(self._corked)self.once('uncork',fn);else fn();};var destroyer=function destroyer(self,end){return function(err){if(err)self.destroy(err.message==='premature close'?null:err);else if(end&&!self._ended)self.end();};};var end=function end(ws,fn){if(!ws)return fn();if(ws._writableState&&ws._writableState.finished)return fn();if(ws._writableState)return ws.end(fn);ws.end();fn();};var toStreams2=function toStreams2(rs){return new stream.Readable({objectMode:true,highWaterMark:16}).wrap(rs);};var Duplexify=function Duplexify(writable,readable,opts){if(!(this instanceof Duplexify))return new Duplexify(writable,readable,opts);stream.Duplex.call(this,opts);this._writable=null;this._readable=null;this._readable2=null;this._forwardDestroy=!opts||opts.destroy!==false;this._forwardEnd=!opts||opts.end!==false;this._corked=1;// start corked\nthis._ondrain=null;this._drained=false;this._forwarding=false;this._unwrite=null;this._unread=null;this._ended=false;this.destroyed=false;if(writable)this.setWritable(writable);if(readable)this.setReadable(readable);};inherits(Duplexify,stream.Duplex);Duplexify.obj=function(writable,readable,opts){if(!opts)opts={};opts.objectMode=true;opts.highWaterMark=16;return new Duplexify(writable,readable,opts);};Duplexify.prototype.cork=function(){if(++this._corked===1)this.emit('cork');};Duplexify.prototype.uncork=function(){if(this._corked&&--this._corked===0)this.emit('uncork');};Duplexify.prototype.setWritable=function(writable){if(this._unwrite)this._unwrite();if(this.destroyed){if(writable&&writable.destroy)writable.destroy();return;}if(writable===null||writable===false){this.end();return;}var self=this;var unend=eos(writable,{writable:true,readable:false},destroyer(this,this._forwardEnd));var ondrain=function ondrain(){var ondrain=self._ondrain;self._ondrain=null;if(ondrain)ondrain();};var clear=function clear(){self._writable.removeListener('drain',ondrain);unend();};if(this._unwrite)process.nextTick(ondrain);// force a drain on stream reset to avoid livelocks\nthis._writable=writable;this._writable.on('drain',ondrain);this._unwrite=clear;this.uncork();// always uncork setWritable\n};Duplexify.prototype.setReadable=function(readable){if(this._unread)this._unread();if(this.destroyed){if(readable&&readable.destroy)readable.destroy();return;}if(readable===null||readable===false){this.push(null);this.resume();return;}var self=this;var unend=eos(readable,{writable:false,readable:true},destroyer(this));var onreadable=function onreadable(){self._forward();};var onend=function onend(){self.push(null);};var clear=function clear(){self._readable2.removeListener('readable',onreadable);self._readable2.removeListener('end',onend);unend();};this._drained=true;this._readable=readable;this._readable2=readable._readableState?readable:toStreams2(readable);this._readable2.on('readable',onreadable);this._readable2.on('end',onend);this._unread=clear;this._forward();};Duplexify.prototype._read=function(){this._drained=true;this._forward();};Duplexify.prototype._forward=function(){if(this._forwarding||!this._readable2||!this._drained)return;this._forwarding=true;var data;while((data=shift(this._readable2))!==null){this._drained=this.push(data);}this._forwarding=false;};Duplexify.prototype.destroy=function(err){if(this.destroyed)return;this.destroyed=true;var self=this;process.nextTick(function(){self._destroy(err);});};Duplexify.prototype._destroy=function(err){if(err){var ondrain=this._ondrain;this._ondrain=null;if(ondrain)ondrain(err);else this.emit('error',err);}if(this._forwardDestroy){if(this._readable&&this._readable.destroy)this._readable.destroy();if(this._writable&&this._writable.destroy)this._writable.destroy();}this.emit('close');};Duplexify.prototype._write=function(data,enc,cb){if(this.destroyed)return cb();if(this._corked)return onuncork(this,this._write.bind(this,data,enc,cb));if(data===SIGNAL_FLUSH)return this._finish(cb);if(!this._writable)return cb();if(this._writable.write(data)===false)this._ondrain=cb;else cb();};Duplexify.prototype._finish=function(cb){var self=this;this.emit('preend');onuncork(this,function(){end(self._forwardEnd&&self._writable,function(){// haxx to not emit prefinish twice\nif(self._writableState.prefinished===false)self._writableState.prefinished=true;self.emit('prefinish');onuncork(self,cb);});});};Duplexify.prototype.end=function(data,enc,cb){if(typeof data==='function')return this.end(null,null,data);if(typeof enc==='function')return this.end(data,null,enc);this._ended=true;if(data)this.write(data);if(!this._writableState.ending)this.write(SIGNAL_FLUSH);return stream.Writable.prototype.end.call(this,cb);};module.exports=Duplexify;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(12).Buffer,__webpack_require__(1));/***/},/* 78 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){var Stream=function(){try{return __webpack_require__(6);// hack to fix a circular dependency issue when used with browserify\n}catch(_){}}();exports=module.exports=__webpack_require__(79);exports.Stream=Stream||exports;exports.Readable=exports;exports.Writable=__webpack_require__(84);exports.Duplex=__webpack_require__(83);exports.Transform=__webpack_require__(85);exports.PassThrough=__webpack_require__(86);if(!process.browser&&process.env.READABLE_STREAM==='disable'&&Stream){module.exports=Stream;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 79 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';module.exports=Readable;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var isArray=__webpack_require__(32);/*</replacement>*/Readable.ReadableState=ReadableState;/*<replacement>*/var EE=__webpack_require__(3).EventEmitter;var EElistenerCount=function EElistenerCount(emitter,type){return emitter.listeners(type).length;};/*</replacement>*/ /*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(6);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(3).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(29).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(80);/*</replacement>*/ /*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/ /*<replacement>*/var debugUtil=__webpack_require__(81);var debug=void 0;if(debugUtil&&debugUtil.debuglog){debug=debugUtil.debuglog('stream');}else{debug=function debug(){};}/*</replacement>*/var BufferList=__webpack_require__(82);var StringDecoder;util.inherits(Readable,Stream);function prependListener(emitter,event,fn){if(typeof emitter.prependListener==='function'){return emitter.prependListener(event,fn);}else{// This is a hack to make sure that our error handler is attached before any\n// userland ones.  NEVER DO THIS. This is here only because this code needs\n// to continue to work with older versions of Node.js that do not include\n// the prependListener() method. The goal is to eventually remove this hack.\nif(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];}}var Duplex;function ReadableState(options,stream){Duplex=Duplex||__webpack_require__(83);options=options||{};// object stream flag. Used to make read(n) ignore n and to\n// make all the buffer merging and length checks go away\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// the point at which it stops calling _read() to fill the buffer\n// Note: 0 is a valid value, means \"don't call _read preemptively ever\"\nvar hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;// A linked list is used to store data chunks instead of an array because the\n// linked list can remove elements from the beginning faster than\n// array.shift()\nthis.buffer=new BufferList();this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// whenever we return null, then we set a flag to say\n// that we're awaiting a 'readable' event emission.\nthis.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen\n// after read()ing all the bytes and not getting any pushback.\nthis.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s\nthis.awaitDrain=0;// if true, a maybeReadMore has been scheduled\nthis.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}var Duplex;function Readable(options){Duplex=Duplex||__webpack_require__(83);if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy\nthis.readable=true;if(options&&typeof options.read==='function')this._read=options.read;Stream.call(this);}// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push=function(chunk,encoding){var state=this._readableState;if(!state.objectMode&&typeof chunk==='string'){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=bufferShim.from(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};Readable.prototype.isPaused=function(){return this._readableState.flowing===false;};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(chunk===null){state.reading=false;onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var _e=new Error('stream.unshift() after end event');stream.emit('error',_e);}else{var skipAdd;if(state.decoder&&!addToFront&&!encoding){chunk=state.decoder.write(chunk);skipAdd=!state.objectMode&&chunk.length===0;}if(!addToFront)state.reading=false;// Don't add to the buffer if we've decoded to an empty string chunk and\n// we're not in object mode\nif(!skipAdd){// if we want the data now, just emit it.\nif(state.flowing&&state.length===0&&!state.sync){stream.emit('data',chunk);stream.read(0);}else{// update the buffer info.\nstate.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}}maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.\nReadable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(35).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this;};// Don't raise the hwm > 8MB\nvar MAX_HWM=0x800000;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2 to prevent increasing hwm excessively in\n// tiny amounts\nn--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n;}// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(n!==n){// Only flow one buffer at a time\nif(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length;}// If we're asking for more than the current hwm, then raise the hwm.\nif(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);if(n<=state.length)return n;// Don't have enough\nif(!state.ended){state.needReadable=true;return 0;}return state.length;}// you can override either this method, or the async _read(n) below.\nReadable.prototype.read=function(n){debug('read',n);n=parseInt(n,10);var state=this._readableState;var nOrig=n;if(n!==0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we\n// already have a bunch of data in the buffer, then just trigger\n// the 'readable' event and move on.\nif(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.\nif(n===0&&state.ended){if(state.length===0)endReadable(this);return null;}// All the actual chunk generation logic needs to be\n// *below* the call to _read.  The reason is that in certain\n// synthetic stream cases, such as passthrough streams, _read\n// may be a completely synchronous operation which may change\n// the state of the read buffer, providing enough data when\n// before there was *not* enough.\n//\n// So, the steps are:\n// 1. Figure out what the state of things will be after we do\n// a read from the buffer.\n//\n// 2. If that resulting state will trigger a _read, then call _read.\n// Note that this may be asynchronous, or synchronous.  Yes, it is\n// deeply ugly to write APIs this way, but that still doesn't mean\n// that the Readable class should behave improperly, as streams are\n// designed to be sync/async agnostic.\n// Take note if the _read call is sync or async (ie, if the read call\n// has returned yet), so that we know whether or not it's safe to emit\n// 'readable' etc.\n//\n// 3. Actually pull the requested chunks out of the buffer and return.\n// if we need a readable event, then we need to do some reading.\nvar doRead=state.needReadable;debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some\nif(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already\n// reading, then it's unnecessary.\nif(state.ended||state.reading){doRead=false;debug('reading or ended',doRead);}else if(doRead){debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.\nif(state.length===0)state.needReadable=true;// call internal read method\nthis._read(state.highWaterMark);state.sync=false;// If _read pushed data synchronously, then `reading` will be false,\n// and we need to re-evaluate how much data we can return to the user.\nif(!state.reading)n=howMuchToRead(nOrig,state);}var ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0;}else{state.length-=n;}if(state.length===0){// If we have nothing in the buffer, then we want to know\n// as soon as we *do* get something into the buffer.\nif(!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.\nif(nOrig!==n&&state.ended)endReadable(this);}if(ret!==null)this.emit('data',ret);return ret;};function chunkInvalid(state,chunk){var er=null;if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// emit 'readable' now to make sure it gets picked up.\nemitReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug('emitReadable',state.flowing);state.emittedReadable=true;if(state.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream);}}function emitReadable_(stream){debug('emit readable');stream.emit('readable');flow(stream);}// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;processNextTick(maybeReadMore_,stream,state);}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.\nbreak;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read=function(n){this.emit('error',new Error('not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)processNextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){debug('onunpipe');if(readable===src){cleanup();}}function onend(){debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter\n// on the source.  This would be more elegant with a .once()\n// handler in flow(), but adding and removing repeatedly is\n// too slow.\nvar ondrain=pipeOnDrain(src);dest.on('drain',ondrain);var cleanedUp=false;function cleanup(){debug('cleanup');// cleanup event handlers once the pipe is broken\ndest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);src.removeListener('data',ondata);cleanedUp=true;// if the reader is waiting for a drain event from this\n// specific writer, then it would cause it to never start\n// flowing again.\n// So, if this is awaiting a drain, then we just call it now.\n// If we don't know, then assume that we are waiting for one.\nif(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}// If the user pushes more data while we're writing to dest then we'll end up\n// in ondata again. However, we only want to increase awaitDrain once because\n// dest will only emit one 'drain' event for the multiple writes.\n// => Introduce a guard on increasing awaitDrain.\nvar increasedAwaitDrain=false;src.on('data',ondata);function ondata(chunk){debug('ondata');increasedAwaitDrain=false;var ret=dest.write(chunk);if(false===ret&&!increasedAwaitDrain){// If the user unpiped during `dest.write()`, it is possible\n// to get stuck in a permanently paused state if that write\n// also returned false.\n// => Check whether `dest` is still a piping destination.\nif((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&indexOf(state.pipes,dest)!==-1)&&!cleanedUp){debug('false write response, pause',src._readableState.awaitDrain);src._readableState.awaitDrain++;increasedAwaitDrain=true;}src.pause();}}// if the dest has an error, then stop piping into it.\n// however, don't suppress the throwing behavior for this.\nfunction onerror(er){debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(EElistenerCount(dest,'error')===0)dest.emit('error',er);}// Make sure our error handler is attached before userland ones.\nprependListener(dest,'error',onerror);// Both close and finish should trigger unpipe, but only once.\nfunction onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to\ndest.emit('pipe',src);// start the flow if it hasn't been started already.\nif(!state.flowing){debug('pipe resume');src.resume();}return dest;};function pipeOnDrain(src){return function(){var state=src._readableState;debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EElistenerCount(src,'data')){state.flowing=true;flow(src);}};}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.\nif(state.pipesCount===0)return this;// just one destination.  most common case.\nif(state.pipesCount===1){// passed in one, but it's not the right one.\nif(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.\nstate.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.\nif(!dest){// remove all.\nvar dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var _i=0;_i<len;_i++){dests[_i].emit('unpipe',this);}return this;}// try to find the right one.\nvar i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);if(ev==='data'){// Start flowing on next tick if stream isn't explicitly paused\nif(this._readableState.flowing!==false)this.resume();}else if(ev==='readable'){var state=this._readableState;if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.emittedReadable=false;if(!state.reading){processNextTick(nReadingNextTick,this);}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self){debug('readable nexttick read 0');self.read(0);}// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug('resume');state.flowing=true;resume(this,state);}return this;};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;processNextTick(resume_,stream,state);}}function resume_(stream,state){if(!state.reading){debug('resume read 0');stream.read(0);}state.resumeScheduled=false;state.awaitDrain=0;stream.emit('resume');flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug('call pause flowing=%j',this._readableState.flowing);if(false!==this._readableState.flowing){debug('pause');this._readableState.flowing=false;this.emit('pause');}return this;};function flow(stream){var state=stream._readableState;debug('flow',state.flowing);while(state.flowing&&stream.read()!==null){}}// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode\nif(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.\n// important when wrapping filters and duplexes.\nfor(var i in stream){if(this[i]===undefined&&typeof stream[i]==='function'){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.\nvar events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the\n// underlying stream.\nself._read=function(n){debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.\nReadable._fromList=fromList;// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n,state){// nothing buffered\nif(state.length===0)return null;var ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){// read it all, truncate the list\nif(state.decoder)ret=state.buffer.join('');else if(state.buffer.length===1)ret=state.buffer.head.data;else ret=state.buffer.concat(state.length);state.buffer.clear();}else{// read part of list\nret=fromListPartial(n,state.buffer,state.decoder);}return ret;}// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n,list,hasStrings){var ret;if(n<list.head.data.length){// slice is the same for buffers and strings\nret=list.head.data.slice(0,n);list.head.data=list.head.data.slice(n);}else if(n===list.head.data.length){// first chunk is a perfect match\nret=list.shift();}else{// result spans more than one buffer\nret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list);}return ret;}// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n,list){var p=list.head;var c=1;var ret=p.data;n-=ret.length;while(p=p.next){var str=p.data;var nb=n>str.length?str.length:n;if(nb===str.length)ret+=str;else ret+=str.slice(0,n);n-=nb;if(n===0){if(nb===str.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=str.slice(nb);}break;}++c;}list.length-=c;return ret;}// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n,list){var ret=bufferShim.allocUnsafe(n);var p=list.head;var c=1;p.data.copy(ret);n-=p.data.length;while(p=p.next){var buf=p.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=buf.slice(nb);}break;}++c;}list.length-=c;return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a\n// bug in node.  Should never happen.\nif(state.length>0)throw new Error('\"endReadable()\" called on non-empty stream');if(!state.endEmitted){state.ended=true;processNextTick(endReadableNT,state,stream);}}function endReadableNT(state,stream){// Check that we didn't get one last unshift.\nif(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1));/***/},/* 80 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){'use strict';var buffer=__webpack_require__(29);var Buffer=buffer.Buffer;var SlowBuffer=buffer.SlowBuffer;var MAX_LEN=buffer.kMaxLength||2147483647;exports.alloc=function alloc(size,fill,encoding){if(typeof Buffer.alloc==='function'){return Buffer.alloc(size,fill,encoding);}if(typeof encoding==='number'){throw new TypeError('encoding must not be number');}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>MAX_LEN){throw new RangeError('size is too large');}var enc=encoding;var _fill=fill;if(_fill===undefined){enc=undefined;_fill=0;}var buf=new Buffer(size);if(typeof _fill==='string'){var fillBuf=new Buffer(_fill,enc);var flen=fillBuf.length;var i=-1;while(++i<size){buf[i]=fillBuf[i%flen];}}else{buf.fill(_fill);}return buf;};exports.allocUnsafe=function allocUnsafe(size){if(typeof Buffer.allocUnsafe==='function'){return Buffer.allocUnsafe(size);}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>MAX_LEN){throw new RangeError('size is too large');}return new Buffer(size);};exports.from=function from(value,encodingOrOffset,length){if(typeof Buffer.from==='function'&&(!global.Uint8Array||Uint8Array.from!==Buffer.from)){return Buffer.from(value,encodingOrOffset,length);}if(typeof value==='number'){throw new TypeError('\"value\" argument must not be a number');}if(typeof value==='string'){return new Buffer(value,encodingOrOffset);}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){var offset=encodingOrOffset;if(arguments.length===1){return new Buffer(value);}if(typeof offset==='undefined'){offset=0;}var len=length;if(typeof len==='undefined'){len=value.byteLength-offset;}if(offset>=value.byteLength){throw new RangeError('\\'offset\\' is out of bounds');}if(len>value.byteLength-offset){throw new RangeError('\\'length\\' is out of bounds');}return new Buffer(value.slice(offset,offset+len));}if(Buffer.isBuffer(value)){var out=new Buffer(value.length);value.copy(out,0,0,value.length);return out;}if(value){if(Array.isArray(value)||typeof ArrayBuffer!=='undefined'&&value.buffer instanceof ArrayBuffer||'length'in value){return new Buffer(value);}if(value.type==='Buffer'&&Array.isArray(value.data)){return new Buffer(value.data);}}throw new TypeError('First argument must be a string, Buffer, '+'ArrayBuffer, Array, or array-like object.');};exports.allocUnsafeSlow=function allocUnsafeSlow(size){if(typeof Buffer.allocUnsafeSlow==='function'){return Buffer.allocUnsafeSlow(size);}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>=MAX_LEN){throw new RangeError('size is too large');}return new SlowBuffer(size);};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 81 */ /***/function(module,exports){/* (ignored) */ /***/},/* 82 */ /***/function(module,exports,__webpack_require__){'use strict';var Buffer=__webpack_require__(29).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(80);/*</replacement>*/module.exports=BufferList;function BufferList(){this.head=null;this.tail=null;this.length=0;}BufferList.prototype.push=function(v){var entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length;};BufferList.prototype.unshift=function(v){var entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length;};BufferList.prototype.shift=function(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret;};BufferList.prototype.clear=function(){this.head=this.tail=null;this.length=0;};BufferList.prototype.join=function(s){if(this.length===0)return'';var p=this.head;var ret=''+p.data;while(p=p.next){ret+=s+p.data;}return ret;};BufferList.prototype.concat=function(n){if(this.length===0)return bufferShim.alloc(0);if(this.length===1)return this.head.data;var ret=bufferShim.allocUnsafe(n>>>0);var p=this.head;var i=0;while(p){p.data.copy(ret,i);i+=p.data.length;p=p.next;}return ret;};/***/},/* 83 */ /***/function(module,exports,__webpack_require__){// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';/*<replacement>*/var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/module.exports=Duplex;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/var Readable=__webpack_require__(79);var Writable=__webpack_require__(84);util.inherits(Duplex,Readable);var keys=objectKeys(Writable.prototype);for(var v=0;v<keys.length;v++){var method=keys[v];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer\nfunction onend(){// if we allow half-open state, or if the writable side ended,\n// then we're ok.\nif(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.\n// But allow more writes to happen in this tick.\nprocessNextTick(onEndNT,this);}function onEndNT(self){self.end();}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}/***/},/* 84 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,setImmediate){// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';module.exports=Writable;/*<replacement>*/var processNextTick=__webpack_require__(71);/*</replacement>*/ /*<replacement>*/var asyncWrite=!process.browser&&['v0.10','v0.9.'].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/ /*<replacement>*/var internalUtil={deprecate:__webpack_require__(76)};/*</replacement>*/ /*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(6);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(3).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(29).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(80);/*</replacement>*/util.inherits(Writable,Stream);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null;}var Duplex;function WritableState(options,stream){Duplex=Duplex||__webpack_require__(83);options=options||{};// object stream flag to indicate whether or not this stream\n// contains buffers or objects.\nthis.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false\n// Note: 0 is a valid value, means that we always return false if\n// the entire buffer is not flushed immediately on write()\nvar hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.\nthis.highWaterMark=~~this.highWaterMark;this.needDrain=false;// at the start of calling end()\nthis.ending=false;// when end() has been called, and returned\nthis.ended=false;// when 'finish' is emitted\nthis.finished=false;// should we decode strings into buffers before passing to _write?\n// this is here so that some node-core streams can optimize string\n// handling at a lower level.\nvar noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement\n// of how much we're waiting to get pushed to some underlying\n// socket or file.\nthis.length=0;// a flag to see when we're in the middle of a write.\nthis.writing=false;// when true all writes will be buffered until .uncork() call\nthis.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// a flag to know if we're processing previously buffered items, which\n// may call the _write() callback in the same tick, so that we don't\n// end up in an overlapped onwrite situation.\nthis.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)\nthis.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)\nthis.writecb=null;// the amount that is being written when _write is called.\nthis.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks\n// this must be 0 before 'finish' can be emitted\nthis.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs\n// This is relevant for synchronous Transform streams\nthis.prefinished=false;// True if the error was already emitted and should not be thrown again\nthis.errorEmitted=false;// count buffered requests\nthis.bufferedRequestCount=0;// allocate the first CorkedRequest, there is always\n// one allocated and free to use, and we maintain at most two\nthis.corkedRequestsFree=new CorkedRequest(this);}WritableState.prototype.getBuffer=function writableStateGetBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};(function(){try{Object.defineProperty(WritableState.prototype,'buffer',{get:internalUtil.deprecate(function(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.')});}catch(_){}})();var Duplex;function Writable(options){Duplex=Duplex||__webpack_require__(83);// Writable ctor is applied to Duplexes, though they're not\n// instanceof Writable, they're instanceof Readable.\nif(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);// legacy.\nthis.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;}Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe, not readable'));};function writeAfterEnd(stream,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb\nstream.emit('error',er);processNextTick(cb,er);}// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream,state,chunk,cb){var valid=true;var er=false;// Always throw error if a null is written\n// if we are not in object mode then throw\n// if it is not a buffer, string, or undefined.\nif(chunk===null){er=new TypeError('May not write null values to stream');}else if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}if(er){stream.emit('error',er);processNextTick(cb,er);valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==='function'){cb=encoding;encoding=null;}if(Buffer.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=nop;if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){var state=this._writableState;state.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.\nif(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new TypeError('Unknown encoding: '+encoding);this._writableState.defaultEncoding=encoding;return this;};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=bufferShim.from(chunk,encoding);}return chunk;}// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.\nif(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync)processNextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet\nvar finished=needFinish(state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state);}if(sync){/*<replacement>*/asyncWrite(afterWrite,stream,state,finished,cb);/*</replacement>*/}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()\nvar l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1;}doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is almost always async, defer these to save a bit of time\n// as the hot path ends with doWrite\nstate.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null;}else{state.corkedRequestsFree=new CorkedRequest(state);}}else{// Slow case, write chunks one-by-one\nwhile(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;// if we didn't call the onwrite immediately, then\n// it means that we need to wait until it does.\n// also, that means that the chunk and cb are currently\n// being processed, so move the buffer counter past them.\nif(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequestCount=0;state.bufferedRequest=entry;state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('not implemented'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks\nif(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.\nif(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit('prefinish');}}function finishMaybe(stream,state){var need=needFinish(state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit('finish');}else{prefinish(stream,state);}}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)processNextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}if(state.corkedRequestsFree){state.corkedRequestsFree.next=_this;}else{state.corkedRequestsFree=_this;}};}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(1),__webpack_require__(75).setImmediate);/***/},/* 85 */ /***/function(module,exports,__webpack_require__){// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';module.exports=Transform;var Duplex=__webpack_require__(83);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/util.inherits(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);// when the writable side finishes, then flush out anything remaining.\nvar stream=this;// start out asking for a readable event once data is transformed.\nthis._readableState.needReadable=true;// we have implemented the _read method, and done the other things\n// that Readable wants before the first _read call, so unset the\n// sync guard flag.\nthis._readableState.sync=false;if(options){if(typeof options.transform==='function')this._transform=options.transform;if(typeof options.flush==='function')this._flush=options.flush;}this.once('prefinish',function(){if(typeof this._flush==='function')this._flush(function(er){done(stream,er);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform=function(chunk,encoding,cb){throw new Error('Not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in\n// will get processed, now that we've asked for it.\nts.needTransform=true;}};function done(stream,er){if(er)return stream.emit('error',er);// if there's nothing in the write buffer, then that means\n// that nothing more will ever be provided\nvar ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error('Calling transform done when ws.length != 0');if(ts.transforming)throw new Error('Calling transform done when still transforming');return stream.push(null);}/***/},/* 86 */ /***/function(module,exports,__webpack_require__){// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';module.exports=PassThrough;var Transform=__webpack_require__(85);/*<replacement>*/var util=__webpack_require__(33);util.inherits=__webpack_require__(34);/*</replacement>*/util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};/***/},/* 87 */ /***/function(module,exports,__webpack_require__){var once=__webpack_require__(41);var noop=function noop(){};var isRequest=function isRequest(stream){return stream.setHeader&&typeof stream.abort==='function';};var eos=function eos(stream,opts,callback){if(typeof opts==='function')return eos(stream,null,opts);if(!opts)opts={};callback=once(callback||noop);var ws=stream._writableState;var rs=stream._readableState;var readable=opts.readable||opts.readable!==false&&stream.readable;var writable=opts.writable||opts.writable!==false&&stream.writable;var onlegacyfinish=function onlegacyfinish(){if(!stream.writable)onfinish();};var onfinish=function onfinish(){writable=false;if(!readable)callback();};var onend=function onend(){readable=false;if(!writable)callback();};var onclose=function onclose(){if(readable&&!(rs&&rs.ended))return callback(new Error('premature close'));if(writable&&!(ws&&ws.ended))return callback(new Error('premature close'));};var onrequest=function onrequest(){stream.req.on('finish',onfinish);};if(isRequest(stream)){stream.on('complete',onfinish);stream.on('abort',onclose);if(stream.req)onrequest();else stream.on('request',onrequest);}else if(writable&&!ws){// legacy streams\nstream.on('end',onlegacyfinish);stream.on('close',onlegacyfinish);}stream.on('end',onend);stream.on('finish',onfinish);if(opts.error!==false)stream.on('error',callback);stream.on('close',onclose);return function(){stream.removeListener('complete',onfinish);stream.removeListener('abort',onclose);stream.removeListener('request',onrequest);if(stream.req)stream.req.removeListener('finish',onfinish);stream.removeListener('end',onlegacyfinish);stream.removeListener('close',onlegacyfinish);stream.removeListener('finish',onfinish);stream.removeListener('end',onend);stream.removeListener('error',callback);stream.removeListener('close',onclose);};};module.exports=eos;/***/},/* 88 */ /***/function(module,exports){module.exports=shift;function shift(stream){var rs=stream._readableState;if(!rs)return null;return rs.objectMode?stream.read():stream.read(getStateLength(rs));}function getStateLength(state){if(state.buffer.length){// Since node 6.3.0 state.buffer is a BufferList not an array\nif(state.buffer.head){return state.buffer.head.data.length;}return state.buffer[0].length;}return state.length;}/***/},/* 89 */ /***/function(module,exports){var ws=null;if(typeof WebSocket!=='undefined'){ws=WebSocket;}else if(typeof MozWebSocket!=='undefined'){ws=MozWebSocket;}else{ws=window.WebSocket||window.MozWebSocket;}module.exports=ws;/***/}/******/]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/others/browserMqtt.js\n");

/***/ }),

/***/ 159:
/*!*****************************************************************!*\
  !*** multi ./resources/metronic/js/pages/others/browserMqtt.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/amik_eyro/Documents/Project/UNILEVER/people-control/resources/metronic/js/pages/others/browserMqtt.js */"./resources/metronic/js/pages/others/browserMqtt.js");


/***/ })

/******/ });